# {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{vx_leadhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Name to identify model (forecast) data in output.
#
MODEL = {{vx_fcst_model_name}}

{{METPLUS_TOOL_NAME}}_DESC = NA
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}

###
# File I/O
###

#
# Forecast model input directory for {{MetplusToolName}}.
#
{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Template for forecast input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
# Note that this can be a comma separated list of ensemble members
# or a single line, - filename wildcard characters may be used, ? or *.
#
{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}

# {{METPLUS_TOOL_NAME}}_CTRL_INPUT_DIR = {INPUT_BASE}
# {{METPLUS_TOOL_NAME}}_CTRL_INPUT_TEMPLATE =
#  {init?fmt=%Y%m%d%H}/mem1/postprd/{ENV[NET]}.t{init?fmt=%H}z.bgdawpf{lead?fmt=%HHH}.tm{init?fmt=%H}.grib2

#
# Output directory for {{MetplusToolName}}.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE = {{metplus_tool_name}}_{MODEL}_{{fieldname_in_met_filedir_names}}_{OBTYPE}_{lead?fmt=%H%M%S}L_{valid?fmt=%Y%m%d_%H%M%S}V.nc
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}
#
# There are n ensembles but 1 is used as control, so specify n-1 members.
#
{{METPLUS_TOOL_NAME}}_N_MEMBERS = {{num_ens_members}}

###
# Field Info
###
#
# Ensemble variables and levels as specified in the ens field dictionary
# of the MET configuration file. Specify as ENS_VARn_NAME, ENS_VARn_LEVELS,
# (optional) ENS_VARn_OPTION
#
{#-
Import the file containing jinja macros.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}

{#-
Jinja requires certain variables to be defined globally within the template
before they can be used in if-statements and other scopes (see Jinja scoping
rules).  Define such variables.
#}
{%- set indx_input_thresh_fcst = '' %}
{%- set error_msg = '' %}
{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}

{%- set field_fcst = '' %}
{%- set level_fcst = '' %}
{%- set thresh_fcst = '' %}

{%- set threshes_fcst = [] %}

{#-
Get the set of valid field groups and ensure that the specified input
field group appears in this list.
#}
{%- set valid_field_groups = vx_config_dict.keys()|list %}
{{- metplus_macros.check_field_group(valid_field_groups, input_field_group) }}

{#-
Reset the input forecast level so that if it happens to be an accumulation
(e.g. 'A03'), the leading zeros in front of the hour are stipped out (e.g.
reset to 'A3').
#}
{%- set input_level_fcst = metplus_macros.get_accumulation_no_zero_pad(input_level_fcst) %}

{#-
Extract from the configuration dictionary the set (which itself is a
dictionary) of fields, levels, and thresholds corresponding to the input
field group.  Then set the delimiter string that separates forecast and
observation values in the various items (i.e. dictionary keys and values
representing field names, levels, and thresholds) in this dictionary.
#}
{%- set fields_levels_threshes_cpld = vx_config_dict[input_field_group] %}
{%- set delim_str = metplus_macros.set_delim_str() %}

{#-
Loop over the fields and set field names, levels, thresholds, and/or
options for each forecast field in the METplus configuration file.  Note
that GenEnsProd only deals with forecasts; it does not consider observations.
#}
{%- set ns = namespace(var_count = 0) %}
{%- for field_cpld, levels_threshes_cpld in fields_levels_threshes_cpld.items() %}

  {%- if delim_str in field_cpld %}
    {%- set field_fcst = field_cpld.split(delim_str)[0] %}
  {%- else %}
    {%- set field_fcst = field_cpld %}
  {%- endif %}

{#-
For convenience, create list of valid forecast levels for the current
field.
#}
  {%- set valid_levels_fcst = [] %}
  {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}
    {%- if delim_str in level_cpld %}
      {%- set level_fcst = level_cpld.split(delim_str)[0] %}
    {%- else %}
      {%- set level_fcst = level_cpld %}
    {%- endif %}
    {%- set tmp = valid_levels_fcst.append(level_fcst) %}
  {%- endfor %}

{#-
Make sure that the input forecast level (input_level_fcst) is set to a
valid value.
#}
  {%- if (input_level_fcst != 'all') and (input_level_fcst not in valid_levels_fcst) %}
    {%- set error_msg = '\n' ~
'The input forecast level (input_level_fcst) must be set either to \'all\'\n' ~
'or to one of the elements in the list of valid levels (valid_levels_fcst)\n' ~
'for the current forecast field (field_fcst).  This is not the case:\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  valid_levels_fcst = ' ~ valid_levels_fcst ~ '\n' ~
'  input_level_fcst = ' ~ input_level_fcst ~ '\n' %}
    {{metplus_macros.print_err_and_quit(error_msg)}}
  {%- endif %}

{#-
Loop over the (coupled) levels and corresponding lists of thresholds.
Extract from these the level values for forecasts and use them to set the
forecast field names, levels, thresholds, and/or options in the METplus
configuration file.
#}
  {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}

    {%- if delim_str in level_cpld %}
      {%- set level_fcst = level_cpld.split(delim_str)[0] %}
    {%- else %}
      {%- set level_fcst = level_cpld %}
    {%- endif %}

    {%- set valid_threshes_fcst = [] %}
    {%- for thresh_cpld in threshes_cpld %}
      {%- if delim_str in thresh_cpld %}
        {%- set thresh_fcst = thresh_cpld.split(delim_str)[0] %}
      {%- else %}
        {%- set thresh_fcst = thresh_cpld %}
      {%- endif %}
      {%- set tmp = valid_threshes_fcst.append(thresh_fcst) %}
    {%- endfor %}

    {%- if (input_level_fcst == 'all') or (input_level_fcst == level_fcst) %}
{#-
Increment the METplus variable counter.
#}
      {%- set ns.var_count = ns.var_count+1 %}

{#-
Set forecast field name.  Note that this has to exactly match the name
of the field in the input forecast file.

For accumulated fields, the input forecast file is generated by MET's
PcpCombine tool.  In that file, the field name consists of the forecast
field name here (field_fcst) with the accumulation period appended to
it (separated by an underscore), so we must do the same here to get an
exact match.
#}
      {%- if (input_field_group in ['APCP', 'ASNOW']) %}
ENS_VAR{{ns.var_count}}_NAME = {{field_fcst}}_{{accum_hh}}
      {%- else %}
ENS_VAR{{ns.var_count}}_NAME = {{field_fcst}}
      {%- endif %}

{#-
Set forecast field level.
#}
ENS_VAR{{ns.var_count}}_LEVELS = {{level_fcst}}

{#-
Set forecast field threshold(s).  Note that no forecast thresholds are
included in the METplus configuration file if input_thresh_fcst is set
to 'none'.
#}
      {%- if (input_thresh_fcst != 'none') %}
{#-
If input_thresh_fcst is set to 'all', set the list of forecast thresholds
to the full set of valid values.
#}
        {%- if (input_thresh_fcst == 'all') %}

          {%- set threshes_fcst = valid_threshes_fcst %}
{#-
If input_thresh_fcst is set to a specific value:
* If that value is valid, i.e. it exists in the list of valid forecast
  thresholds, get its index in that list and use it to set the forecast
  threshold to a one-element list containing that value.
* If the input forecast threshold is not valid, print out a warning message
  and exit.
#}
        {%- else %}

          {%- if input_thresh_fcst in valid_threshes_fcst %}
            {%- set indx_input_thresh_fcst = valid_threshes_fcst.index(input_thresh_fcst) %}
            {%- set threshes_fcst = [valid_threshes_fcst[indx_input_thresh_fcst]] %}
          {%- else %}
            {%- set error_msg = '\n' ~
'For the current forecast field (field_fcst) and forecast level (level_fcst),\n' ~
'the input forecast threshold (input_thresh_fcst) does not exist in the list\n' ~
'of valid forecast thresholds (valid_threshes_fcst):\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  level_fcst = ' ~ level_fcst ~ '\n' ~
'  valid_threshes_fcst = ' ~ valid_threshes_fcst ~ '\n' ~
'  input_thresh_fcst = ' ~ input_thresh_fcst ~ '\n' %}
            {{metplus_macros.print_err_and_quit(error_msg)}}
          {%- endif %}

        {%- endif %}
{#-
If threshes_fcst has been reset to something other than its default
value of an empty list, then set the forecast thresholds in the METplus
configuration file because that implies threshes_fcst was set above to
a non-empty value.  Then reset threshes_fcst to its default value for
proper processing of thresholds for the next field.
#}
        {%- if (threshes_fcst != []) %}
ENS_VAR{{ns.var_count}}_THRESH = {{threshes_fcst|join(', ')}}
        {%- endif %}
        {%- set threshes_fcst = [] %}

      {%- endif %}

{#-
Set forecast field options.
#}
      {%- set opts_indent_len = 19 %}
      {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
        {%- set opts_indent_len = opts_indent_len + 1 %}
      {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
        {%- set opts_indent_len = opts_indent_len + 2 %}
      {%- elif (ns.var_count > 999) %}
        {%- set opts_indent_len = opts_indent_len + 3 %}
      {%- endif %}
      {%- set opts_indent = ' '*opts_indent_len %}

      {%- if input_field_group == 'RETOP' %}

        {%- if field_fcst == 'RETOP' %}
ENS_VAR{{ns.var_count}}_OPTIONS = convert(x) = x * 3.28084 * 0.001; ;; Convert from meters to kilofeet.
        {%- endif %}

      {%- elif input_field_group == 'ADPSFC' %}

        {%- if field_fcst == 'HGT' %}
ENS_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215;
{{opts_indent}}desc = "CEILING";
        {%- elif field_fcst == 'TCDC' %}
ENS_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 200;
{{opts_indent}}GRIB2_ipdtmpl_index=[27];
{{opts_indent}}GRIB2_ipdtmpl_val=[255];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
        {%- elif field_fcst == 'VIS' %}
ENS_VAR{{ns.var_count}}_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }
        {%- elif field_fcst == 'WIND' %}
ENS_VAR{{ns.var_count}}_OPTIONS = GRIB2_pdt = 0; ;; Derive instantaneous 10-m wind from U/V components, overriding max 10-m wind.
        {%- endif %}

      {%- elif input_field_group == 'ADPUPA' %}

        {%- if field_fcst == 'CAPE' %}
ENS_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
        {%- endif %}

      {%- endif %}

{#-
Print out a newline to separate the settings for the current field from
those for the next field.
#}
      {{- '\n' }}

    {%- endif %}

  {%- endfor %}
{%- endfor %}
###
# {{MetplusToolName}}
###

# {{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = NONE
# {{METPLUS_TOOL_NAME}}_REGRID_METHOD = NEAREST
# {{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 1
# {{METPLUS_TOOL_NAME}}_REGRID_VLD_THRESH = 0.5
# {{METPLUS_TOOL_NAME}}_REGRID_SHAPE = SQUARE

# {{METPLUS_TOOL_NAME}}_CENSOR_THRESH =
# {{METPLUS_TOOL_NAME}}_CENSOR_VAL =
# {{METPLUS_TOOL_NAME}}_CAT_THRESH =
# {{METPLUS_TOOL_NAME}}_NC_VAR_STR =

# Threshold for ratio of valid files to expected files to allow app to run
{{METPLUS_TOOL_NAME}}_ENS_THRESH = 0.05

{{METPLUS_TOOL_NAME}}_NBRHD_PROB_WIDTH = 27
{{METPLUS_TOOL_NAME}}_NBRHD_PROB_SHAPE = CIRCLE
{{METPLUS_TOOL_NAME}}_NBRHD_PROB_VLD_THRESH = 0.0

# {{METPLUS_TOOL_NAME}}_NMEP_SMOOTH_VLD_THRESH = 0.0
# {{METPLUS_TOOL_NAME}}_NMEP_SMOOTH_SHAPE = CIRCLE
# {{METPLUS_TOOL_NAME}}_NMEP_SMOOTH_GAUSSIAN_DX = 81.27
# {{METPLUS_TOOL_NAME}}_NMEP_SMOOTH_GAUSSIAN_RADIUS = 120
# {{METPLUS_TOOL_NAME}}_NMEP_SMOOTH_METHOD = GAUSSIAN
# {{METPLUS_TOOL_NAME}}_NMEP_SMOOTH_WIDTH = 1

# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FILE_NAME =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FIELD =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_METHOD =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_WIDTH =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_VLD_THRESH =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_SHAPE =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_MATCH_MONTH =
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_DAY_INTERVAL = 31
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_HOUR_INTERVAL = 6

# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FILE_NAME =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FIELD =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_METHOD =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_WIDTH =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_VLD_THRESH =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_SHAPE =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_TIME_INTERP_METHOD =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_MATCH_MONTH =
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_DAY_INTERVAL = 31
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_HOUR_INTERVAL = 6

{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_LATLON = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MEAN = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_STDEV = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MINUS = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_PLUS = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MIN = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MAX = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_RANGE = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_VLD_COUNT = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_FREQUENCY = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_NEP = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_NMEP = TRUE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_CLIMO = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_CLIMO_CDF = FALSE

# {{METPLUS_TOOL_NAME}}_ENS_MEMBER_IDS =
# {{METPLUS_TOOL_NAME}}_CONTROL_ID =
