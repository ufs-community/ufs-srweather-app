# {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{vx_leadhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to {{MetplusToolName}}.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
{{METPLUS_TOOL_NAME}}_CONFIG_FILE = {PARM_BASE}/met_config/{{MetplusToolName}}Config_wrapped
#
# Name to identify model (forecast) data in output.
#
MODEL = {{vx_fcst_model_name}}

{{METPLUS_TOOL_NAME}}_DESC = NA
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Observation data time window(s).
#
{%- if input_field_group in ['APCP', 'ASNOW'] %}
OBS_FILE_WINDOW_BEGIN = 0
OBS_FILE_WINDOW_END = 0
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = 0
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = 0
{%- elif input_field_group in ['REFC', 'RETOP'] %}
OBS_FILE_WINDOW_BEGIN = -300
OBS_FILE_WINDOW_END = 300
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = 0
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = 0
{%- elif input_field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_WINDOW_BEGIN = -1799
OBS_WINDOW_END = 1800
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = {OBS_WINDOW_END}
{%- endif %}

# number of expected members for ensemble. Should correspond with the
# number of items in the list for FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE
{{METPLUS_TOOL_NAME}}_N_MEMBERS = {{num_ens_members}}

# ens.ens_thresh value in the MET config file
# threshold for ratio of valid files to expected files to allow app to run
{{METPLUS_TOOL_NAME}}_ENS_THRESH = 0.05

# ens.vld_thresh value in the MET config file
{{METPLUS_TOOL_NAME}}_ENS_VLD_THRESH = 1.0

{%- if input_field_group in ['ADPSFC', 'ADPUPA'] %}

{{METPLUS_TOOL_NAME}}_OBS_QUALITY_INC = 0, 1, 2, 3, 9, NA
#{{METPLUS_TOOL_NAME}}_OBS_QUALITY_EXC =
{%- endif %}

# {{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE is not required.
# If the variable is not defined, or the value is not set, then the MET
# default is used.
{%- if input_field_group in ['APCP', 'ASNOW'] %}
{{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE = {MET_BASE}/table_files/obs_error_table.txt
{%- elif input_field_group in ['REFC', 'RETOP'] %}
{{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE =
{%- elif input_field_group in ['ADPSFC', 'ADPUPA'] %}
{{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE = {MET_BASE}/table_files/obs_error_table.txt
{%- endif %}


# Used in the MET config file for: regrid to_grid field
{%- set comment_or_null = '' %}
{%- set regrid_to_grid = '' %}
{%- set regrid_method = '' %}
{%- if input_field_group in ['APCP', 'ASNOW'] %}
  {%- set comment_or_null = '' %}
  {%- set regrid_to_grid = 'FCST' %}
  {%- set regrid_method = 'BUDGET' %}
{%- elif input_field_group in ['REFC', 'RETOP'] %}
  {%- set comment_or_null = '' %}
  {%- set regrid_to_grid = 'FCST' %}
  {%- set regrid_method = 'BUDGET' %}
{%- elif input_field_group in ['ADPSFC', 'ADPUPA'] %}
  {%- set comment_or_null = '#' %}
  {%- set regrid_to_grid = 'NONE' %}
  {%- set regrid_method = 'BILIN' %}
{%- endif %}
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = {{regrid_to_grid}}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_METHOD = {{regrid_method}}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_VLD_THRESH = 0.5
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_SHAPE = SQUARE

{{METPLUS_TOOL_NAME}}_CENSOR_THRESH =
{{METPLUS_TOOL_NAME}}_CENSOR_VAL =
{% if input_field_group in ['APCP', 'ASNOW'] %}
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE =
{{METPLUS_TOOL_NAME}}_DUPLICATE_FLAG = UNIQUE
{{METPLUS_TOOL_NAME}}_SKIP_CONST = TRUE
{{METPLUS_TOOL_NAME}}_OBS_ERROR_FLAG = TRUE
{%- elif input_field_group in ['REFC', 'RETOP'] %}
# Should this parameter be set to something other than ADPSFC (maybe
# just leave empty) since we are not verifying surface fields?
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE = ADPSFC
{{METPLUS_TOOL_NAME}}_DUPLICATE_FLAG = NONE
{{METPLUS_TOOL_NAME}}_SKIP_CONST = TRUE
{{METPLUS_TOOL_NAME}}_OBS_ERROR_FLAG = FALSE
{%- elif input_field_group in ['ADPSFC', 'ADPUPA'] %}
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE = {{input_field_group}}
{{METPLUS_TOOL_NAME}}_DUPLICATE_FLAG = NONE
{{METPLUS_TOOL_NAME}}_SKIP_CONST = FALSE
{{METPLUS_TOOL_NAME}}_OBS_ERROR_FLAG = FALSE
{%- endif %}

{{METPLUS_TOOL_NAME}}_ENS_SSVAR_BIN_SIZE = 1.0
{{METPLUS_TOOL_NAME}}_ENS_PHIST_BIN_SIZE = 0.05

#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_DAY_INTERVAL = 31
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_HOUR_INTERVAL = 6

#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_DAY_INTERVAL = 31
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_HOUR_INTERVAL = 6

{% set comment_or_null = '' %}
{%- if input_field_group in ['APCP', 'ASNOW'] %}
  {%- set comment_or_null = '' %}
{%- elif input_field_group in ['REFC', 'RETOP'] %}
  {%- set comment_or_null = '' %}
{%- elif input_field_group in ['ADPSFC', 'ADPUPA'] %}
  {%- set comment_or_null = '#' %}
{%- endif %}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = False
{% if input_field_group in ['APCP', 'ASNOW'] %}
{{METPLUS_TOOL_NAME}}_MASK_GRID =
{%- elif input_field_group in ['REFC', 'RETOP'] %}
{{METPLUS_TOOL_NAME}}_MASK_GRID = FULL
{%- elif input_field_group in ['ADPSFC', 'ADPUPA'] %}
{{METPLUS_TOOL_NAME}}_MASK_GRID =
{%- endif %}

{{METPLUS_TOOL_NAME}}_CI_ALPHA = 0.05

{{METPLUS_TOOL_NAME}}_INTERP_FIELD = BOTH
{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH = 1.0
{{METPLUS_TOOL_NAME}}_INTERP_SHAPE = SQUARE
{{METPLUS_TOOL_NAME}}_INTERP_METHOD = NEAREST
{{METPLUS_TOOL_NAME}}_INTERP_WIDTH = 1

{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECNT = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RPS = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RHIST = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PHIST = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ORANK = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SSVAR = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RELP = STAT

{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_RANK = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_WEIGHT = FALSE
#
# Forecast and observation variables and levels as specified in the fcst
# field dictionary of the MET configuration file.  Specify as FCST_VARn_NAME,
# FCST_VARn_LEVELS, (optional) FCST_VARn_OPTION and OBS_VARn_NAME,
# OBS_VARn_LEVELS, (optional) OBS_VARn_OPTION.
#
{#-
Import the file containing jinja macros.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}

{#-
Jinja requires certain variables to be defined globally within the template
before they can be used in if-statements and other scopes (see Jinja scoping
rules).  Define such variables.
#}
{%- set indx_level_fcst = '' %}
{%- set indx_input_thresh_fcst = '' %}
{%- set error_msg = '' %}
{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}

{%- set field_fcst = '' %}
{%- set field_obs = '' %}
{%- set level_fcst = '' %}
{%- set level_obs = '' %}
{%- set thresh_fcst = '' %}
{%- set thresh_obs = '' %}

{%- set threshes_fcst = [] %}
{%- set threshes_obs = [] %}

{#-
Get the set of valid field groups and ensure that the specified input
field group appears in this list.
#}
{%- set valid_field_groups = vx_config_dict.keys()|list %}
{{- metplus_macros.check_field_group(valid_field_groups, input_field_group) }}

{#-
Reset the input forecast level so that if it happens to be an accumulation
(e.g. 'A03'), the leading zeros in front of the hour are stipped out (e.g.
reset to 'A3').
#}
{%- set input_level_fcst = metplus_macros.get_accumulation_no_zero_pad(input_level_fcst) %}

{#-
Extract from the configuration dictionary the set (which itself is a
dictionary) of fields, levels, and thresholds corresponding to the input
field group.  Then set the delimiter string that separates forecast and
observation values in the various items (i.e. dictionary keys and values
representing field names, levels, and thresholds) in this dictionary.
#}
{%- set fields_levels_threshes_cpld = vx_config_dict[input_field_group] %}
{%- set delim_str = metplus_macros.set_delim_str() %}

{#-
Loop over the fields and set field names, levels, thresholds, and/or
options for each field, both for forecasts and for observations, in the
METplus configuration file.
#}
{%- set ns = namespace(var_count = 0) %}
{%- for field_cpld, levels_threshes_cpld in fields_levels_threshes_cpld.items() %}

  {%- if delim_str in field_cpld %}
    {%- set field_fcst, field_obs = field_cpld.split(delim_str) %}
  {%- else %}
    {%- set field_fcst = field_cpld %}
    {%- set field_obs = field_cpld %}
  {%- endif %}

{#-
For convenience, create lists of valid forecast and observation levels
for the current field.
#}
  {%- set valid_levels_fcst = [] %}
  {%- set valid_levels_obs = [] %}
  {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}
    {%- if delim_str in level_cpld %}
      {%- set level_fcst, level_obs = level_cpld.split(delim_str) %}
    {%- else %}
      {%- set level_fcst = level_cpld %}
      {%- set level_obs = level_cpld %}
    {%- endif %}
    {%- set tmp = valid_levels_fcst.append(level_fcst) %}
    {%- set tmp = valid_levels_obs.append(level_obs) %}
  {%- endfor %}

{#-
Make sure that the input forecast level (input_level_fcst) is set to a
valid value.
#}
  {%- if (input_level_fcst != 'all') and (input_level_fcst not in valid_levels_fcst) %}
    {%- set error_msg = '\n' ~
'The input forecast level (input_level_fcst) must be set either to \'all\'\n' ~
'or to one of the elements in the list of valid levels (valid_levels_fcst)\n' ~
'for the current forecast field (field_fcst).  This is not the case:\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  valid_levels_fcst = ' ~ valid_levels_fcst ~ '\n' ~
'  input_level_fcst = ' ~ input_level_fcst ~ '\n' %}
    {{metplus_macros.print_err_and_quit(error_msg)}}
  {%- endif %}

{#-
Loop over the (coupled) levels and corresponding lists of thresholds.
Extract from these the level values for forecasts and observations and
use them to set the forecast and observation field names, levels,
thresholds, and/or options in the METplus configuration file.
#}
  {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}

    {%- if delim_str in level_cpld %}
      {%- set level_fcst, level_obs = level_cpld.split(delim_str) %}
    {%- else %}
      {%- set level_fcst = level_cpld %}
      {%- set level_obs = level_cpld %}
    {%- endif %}

    {%- set valid_threshes_fcst = [] %}
    {%- set valid_threshes_obs = [] %}
    {%- for thresh_cpld in threshes_cpld %}
      {%- if delim_str in thresh_cpld %}
        {%- set thresh_fcst, thresh_obs = thresh_cpld.split(delim_str) %}
      {%- else %}
        {%- set thresh_fcst = thresh_cpld %}
        {%- set thresh_obs = thresh_cpld %}
      {%- endif %}
      {%- set tmp = valid_threshes_fcst.append(thresh_fcst) %}
      {%- set tmp = valid_threshes_obs.append(thresh_obs) %}
    {%- endfor %}

    {%- if (input_level_fcst == 'all') or (input_level_fcst == level_fcst) %}
{#-
Increment the METplus variable counter.
#}
      {%- set ns.var_count = ns.var_count+1 %}

{#-
Set forecast field name.  Note that this has to exactly match the name
of the field in the input forecast file.

For accumulated fields, the input forecast file is generated by MET's
PcpCombine tool.  In that file, the field name consists of the forecast
field name here (field_fcst) with the accumulation period appended to
it (separated by an underscore), so we must do the same here to get an
exact match.
#}
      {%- if (input_field_group in ['APCP', 'ASNOW']) %}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}_{{accum_hh}}
      {%- else %}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}
      {%- endif %}

{#-
Set forecast field level.
#}
FCST_VAR{{ns.var_count}}_LEVELS = {{level_fcst}}

{#-
Set forecast field threshold(s).  Note that no forecast thresholds are
included in the METplus configuration file if input_thresh_fcst is set
to 'none'.
#}
      {%- if (input_thresh_fcst != 'none') %}
{#-
If input_thresh_fcst is set to 'all', set the list of forecast thresholds
to the full set of valid values.
#}
        {%- if (input_thresh_fcst == 'all') %}

          {%- set threshes_fcst = valid_threshes_fcst %}
{#-
If input_thresh_fcst is set to a specific value:
* If that value is valid, i.e. it exists in the list of valid forecast
  thresholds, get its index in that list and use it to set the forecast
  threshold to a one-element list containing that value.  Note that the
  index will be needed later below when setting the observation threshold(s).
* If the input forecast threshold is not valid, print out a warning message
  and exit.
#}
        {%- else %}

          {%- if input_thresh_fcst in valid_threshes_fcst %}
            {%- set indx_input_thresh_fcst = valid_threshes_fcst.index(input_thresh_fcst) %}
            {%- set threshes_fcst = [valid_threshes_fcst[indx_input_thresh_fcst]] %}
          {%- else %}
            {%- set error_msg = '\n' ~
'For the current forecast field (field_fcst) and forecast level (level_fcst),\n' ~
'the input forecast threshold (input_thresh_fcst) does not exist in the list\n' ~
'of valid forecast thresholds (valid_threshes_fcst):\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  level_fcst = ' ~ level_fcst ~ '\n' ~
'  valid_threshes_fcst = ' ~ valid_threshes_fcst ~ '\n' ~
'  input_thresh_fcst = ' ~ input_thresh_fcst ~ '\n' %}
            {{metplus_macros.print_err_and_quit(error_msg)}}
          {%- endif %}

        {%- endif %}
{#-
If threshes_fcst has been reset to something other than its default
value of an empty list, then set the forecast thresholds in the METplus
configuration file because that implies threshes_fcst was set above to
a non-empty value.  Then reset threshes_fcst to its default value for
proper processing of thresholds for the next field.
#}
        {%- if (threshes_fcst != []) %}
FCST_VAR{{ns.var_count}}_THRESH = {{threshes_fcst|join(', ')}}
        {%- endif %}
        {%- set threshes_fcst = [] %}

      {%- endif %}

{#-
Set forecast field options.
#}
      {%- set opts_indent_len = 20 %}
      {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
        {%- set opts_indent_len = opts_indent_len + 1 %}
      {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
        {%- set opts_indent_len = opts_indent_len + 2 %}
      {%- elif (ns.var_count > 999) %}
        {%- set opts_indent_len = opts_indent_len + 3 %}
      {%- endif %}
      {%- set opts_indent = ' '*opts_indent_len %}

      {%- if input_field_group == 'APCP' %}

        {%- if field_fcst == 'APCP' %}
FCST_VAR{{ns.var_count}}_OPTIONS = ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}

      {%- elif input_field_group == 'ASNOW' %}

        {%- if field_fcst == 'ASNOW' %}
FCST_VAR{{ns.var_count}}_OPTIONS = ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}

      {%- elif input_field_group == 'REFC' %}

        {%- if field_fcst == 'REFC' %}
FCST_VAR{{ns.var_count}}_OPTIONS = ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}

      {%- elif input_field_group == 'RETOP' %}

        {%- if field_fcst == 'RETOP' %}
FCST_VAR{{ns.var_count}}_OPTIONS = convert(x) = x * 3.28084 * 0.001; ;; Convert from meters to kilofeet.
{{opts_indent}}ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}

      {%- elif input_field_group == 'ADPSFC' %}

        {%- if field_fcst == 'HGT' %}
FCST_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215;
{{opts_indent}}desc = "CEILING";
        {%- elif field_fcst == 'TCDC' %}
FCST_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 200;
{{opts_indent}}GRIB2_ipdtmpl_index=[27];
{{opts_indent}}GRIB2_ipdtmpl_val=[255];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
        {%- elif field_fcst == 'VIS' %}
FCST_VAR{{ns.var_count}}_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }
        {%- elif field_fcst == 'WIND' %}
FCST_VAR{{ns.var_count}}_OPTIONS = GRIB2_pdt = 0; ;; Derive instantaneous 10-m wind from U/V components, overriding max 10-m wind.
        {%- endif %}

      {%- elif input_field_group == 'ADPUPA' %}

        {%- if field_fcst == 'CAPE' %}
FCST_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
        {%- endif %}

      {%- endif %}

{#-
Set observation field name.  Note that this has to exactly match the name
of the field in the input observation file.

For accumulated fields, the input observation file is generated by MET's
PcpCombine tool.  In that file, the field name consists of the observation
field name here (field_obs) with the accumulation period appended to it
(separated by an underscore), so we must do the same here to get an exact
match.
#}
      {%- if (input_field_group in ['APCP', 'ASNOW']) %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}_{{accum_hh}}
      {%- else %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}
      {%- endif %}

{#-
Set observation field level.
#}
      {%- set indx_level_fcst = valid_levels_fcst.index(level_fcst) %}
      {%- set level_obs = valid_levels_obs[indx_level_fcst] %}
OBS_VAR{{ns.var_count}}_LEVELS = {{level_obs}}

{#-
Set observation field threshold(s).  Note that no observation thresholds
are included in the METplus configuration file if input_thresh_fcst is
set to 'none'.
#}
      {%- if (input_thresh_fcst != 'none') %}
{#-
If input_thresh_fcst is set to 'all', set the list of observation thresholds
to the full set of valid values.
#}
        {%- if (input_thresh_fcst == 'all') %}

          {%- set threshes_obs = valid_threshes_obs %}
{#-
If input_thresh_fcst is set to a specific forecast threshold, then the
observation threshold is given by the element in the list of valid
observation thresholds that has the same index as that of input_thresh_fcst
in the list of valid forecast thresholds.
#}
        {%- else %}
          {%- set threshes_obs = [valid_threshes_obs[indx_input_thresh_fcst]] %}
        {%- endif %}
{#-
If threshes_obs has been reset to something other than its default value
of an empty list, then set the observation thresholds in the METplus
configuration file because that implies threshes_obs was set above to
a non-empty value.  Then reset threshes_obs to its default value for
proper processing of thresholds for the next field.
#}
        {%- if (threshes_obs != []) %}
OBS_VAR{{ns.var_count}}_THRESH = {{threshes_obs|join(', ')}}
        {%- endif %}
        {%- set threshes_obs = [] %}

      {%- endif %}

{#-
Set observation field options.
#}
      {%- set opts_indent_len = opts_indent_len - 1 %}
      {%- set opts_indent = ' '*opts_indent_len %}

      {%- if input_field_group == 'APCP' %}

        {%- if field_obs == 'APCP' %}
OBS_VAR{{ns.var_count}}_OPTIONS = {FCST_VAR{{ns.var_count}}_OPTIONS}
        {%- endif %}

      {%- elif input_field_group == 'ASNOW' %}

        {%- if field_obs == 'ASNOW' %}
OBS_VAR{{ns.var_count}}_OPTIONS = {FCST_VAR{{ns.var_count}}_OPTIONS};
{{opts_indent}}convert(x) = 100.0*x;
        {%- endif %}

      {%- elif input_field_group == 'REFC' %}

        {%- if field_obs == 'MergedReflectivityQCComposite' %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = lt-20;
{{opts_indent}}censor_val = -20.0;
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
{{opts_indent}}ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}

      {%- elif input_field_group == 'RETOP' %}

        {%- if field_obs == 'EchoTop18' %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = lt-20;
{{opts_indent}}censor_val = -20.0;
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
{{opts_indent}}convert(x) = x * 3280.84 * 0.001; ;; Convert from kilometers to kilofeet.
{{opts_indent}}ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}

      {%- elif input_field_group == 'ADPSFC' %}

        {%- if field_obs in ['DPT', 'TMP', 'WIND'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = obs_error = { flag = TRUE; dist_type = NONE; dist_parm = []; inst_bias_scale = 1.0; inst_bias_offset = 0.0; min = NA; max = NA; }
        {%- elif field_obs == 'CEILING' %}
OBS_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215
        {%- endif %}

      {%- elif input_field_group == 'ADPUPA' %}

        {%- if field_obs in ['DPT', 'HGT', 'TMP', 'WIND'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = obs_error = { flag = TRUE; dist_type = NONE; dist_parm = []; inst_bias_scale = 1.0; inst_bias_offset = 0.0; min = NA; max = NA; }
        {%- elif field_obs == 'CAPE' %}
OBS_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
        {%- elif field_obs == 'PBL' %}
OBS_VAR{{ns.var_count}}_OPTIONS = desc = "TKE";
        {%- endif %}

      {%- endif %}

{#-
Print out a newline to separate the settings for the current field (both
forecast and observation settings) from those for the next field.
#}
      {{- '\n' }}

    {%- endif %}

  {%- endfor %}
{%- endfor %}
[dir]
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
#
# Point observation input directory for {{MetplusToolName}}.
#
{%- if input_field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_DIR = {{obs_input_dir}}
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_DIR =
{%- endif %}
#
# Grid observation input directory for {{MetplusToolName}}.
#
{%- if input_field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_DIR =
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_DIR = {{obs_input_dir}}
{%- endif %}
#
# Forecast model input directory for {{MetplusToolName}}.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used
# in this example
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR =
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used
# in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR =
#
# Output directory for {{MetplusToolName}}.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for point observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_DIR.
#
{%- if input_field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_TEMPLATE = {{obs_input_fn_template}}
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_TEMPLATE =
{%- endif %}
#
# Template for gridded observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_DIR.
#
{%- if input_field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_TEMPLATE =
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_TEMPLATE = {{obs_input_fn_template}}
{%- endif %}
#
# Template for forecast input to {{MetplusToolName}} relative to
# FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
# Note that this can be a comma separated list of ensemble members
# or a single line, - filename wildcard characters may be used, ? or *.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE =
{{METPLUS_TOOL_NAME}}_OUTPUT_PREFIX = {MODEL}_{{fieldname_in_met_filedir_names}}_{OBTYPE}_{lead?fmt=%H%M%S}L
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_TEMPLATE =
#
# Variable used to specify one or more verification mask files for
# {{MetplusToolName}}.  Not used for this example.
#
{{METPLUS_TOOL_NAME}}_VERIFICATION_MASK_TEMPLATE = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
