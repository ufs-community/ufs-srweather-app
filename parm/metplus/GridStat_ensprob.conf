# Ensemble probabilistic {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{vx_leadhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to {{MetplusToolName}}.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
{{METPLUS_TOOL_NAME}}_CONFIG_FILE = {PARM_BASE}/met_config/{{MetplusToolName}}Config_wrapped

# grid to remap data. Value is set as the 'to_grid' variable in the 'regrid' dictionary
# See MET User's Guide for more information
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = FCST
{{METPLUS_TOOL_NAME}}_REGRID_VLD_THRESH = 0.5
{{METPLUS_TOOL_NAME}}_REGRID_METHOD = BUDGET
{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2
{{METPLUS_TOOL_NAME}}_REGRID_SHAPE = SQUARE

{%- if input_field_group in ['APCP', 'ASNOW'] %}

#{{METPLUS_TOOL_NAME}}_INTERP_FIELD = BOTH
#{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH = 1.0
#{{METPLUS_TOOL_NAME}}_INTERP_SHAPE = SQUARE
#{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = NEAREST
#{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 1

#{{METPLUS_TOOL_NAME}}_GRID_WEIGHT_FLAG =
{%- elif input_field_group in ['REFC', 'RETOP'] %}

{{METPLUS_TOOL_NAME}}_INTERP_FIELD = NONE
{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH = 1.0
{{METPLUS_TOOL_NAME}}_INTERP_SHAPE = SQUARE
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = NEAREST
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 1

{{METPLUS_TOOL_NAME}}_GRID_WEIGHT_FLAG = NONE
{%- endif %}
#
# Name to identify model (forecast) data in output.
#
# The variable MODEL is recorded in the stat files, and the data in
# these files is then plotted (e.g. using METViewer).  Here, we add a
# suffix to MODEL that identifies the data as ensemble-probabilistic.
# This makes it easier to identify each curve.
#
MODEL = {{vx_fcst_model_name}}_ensprob
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Value to enter under the DESC column in the output stat file.
#
{{METPLUS_TOOL_NAME}}_DESC = NA
#
# Overrides of MET configuration defaults.
#
{{METPLUS_TOOL_NAME}}_MET_CONFIG_OVERRIDES = cat_thresh = [NA]; cnt_thresh = [NA]; cnt_logic = UNION; wind_thresh = [NA]; wind_logic = UNION; ci_alpha = [0.05]; rank_corr_flag = FALSE;
#
# List of forecast and corresponding observation fields to process.
#
{#-
Import the file containing jinja macros.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}

{#-
Set the probabilistic threshold to be used for the forecast field.  If
necessary, this can be changed to be an input parameter in the calling
script instead of a hard-coded value as below.
#}
{%- set thresh_fcst_prob = '==0.1' %}

{#-
Jinja requires certain variables to be defined globally within the template
before they can be used in if-statements and other scopes (see Jinja
scoping rules).  Define such variables.
#}
{%- set indx_level_fcst = '' %}
{%- set indx_thresh_fcst = '' %}
{%- set error_msg = '' %}
{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}

{%- set field_fcst = '' %}
{%- set field_obs = '' %}
{%- set level_fcst = '' %}
{%- set level_obs = '' %}
{%- set thresh_fcst = '' %}
{%- set thresh_obs = '' %}
{%- set thresh_fcst_and_or = '' %}

{#-
Get the set of valid field groups and ensure that the specified input
field group appears in this list.
#}
{%- set valid_field_groups = vx_config_dict.keys()|list %}
{{- metplus_macros.check_field_group(valid_field_groups, input_field_group) }}

{#-
Reset the input forecast level so that if it happens to be an accumulation
(e.g. 'A03'), the leading zeros in front of the hour are stipped out (e.g.
reset to 'A3').
#}
{%- set input_level_fcst = metplus_macros.get_accumulation_no_zero_pad(input_level_fcst) %}

{#-
Extract from the configuration dictionary the set (which itself is a
dictionary) of fields, levels, and thresholds corresponding to the input
field group.  Then set the delimiter string that separates forecast and
observation values in the various items (i.e. dictionary keys and values
representing field names, levels, and thresholds) in this dictionary.
#}
{%- set fields_levels_threshes_cpld = vx_config_dict[input_field_group] %}
{%- set delim_str = metplus_macros.set_delim_str() %}

{#-
Loop over the fields and set field names, levels, thresholds, and/or
options for each field, both for forecasts and for observations, in the
METplus configuration file.
#}
{%- set ns = namespace(var_count = 0) %}
{#-
Loop over each field twice, the first treating the forecast field as
probabilistic and the second time as a scalar.
#}
{%- for treat_fcst_as_prob in [True, False] %}

  {%- for field_cpld, levels_threshes_cpld in fields_levels_threshes_cpld.items() %}

    {%- if delim_str in field_cpld %}
      {%- set field_fcst, field_obs = field_cpld.split(delim_str) %}
    {%- else %}
      {%- set field_fcst = field_cpld %}
      {%- set field_obs = field_cpld %}
    {%- endif %}

{#-
For convenience, create lists of valid forecast and observation levels
for the current field.
#}
    {%- set valid_levels_fcst = [] %}
    {%- set valid_levels_obs = [] %}
    {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}
      {%- if delim_str in level_cpld %}
        {%- set level_fcst, level_obs = level_cpld.split(delim_str) %}
      {%- else %}
        {%- set level_fcst = level_cpld %}
        {%- set level_obs = level_cpld %}
      {%- endif %}
      {%- set tmp = valid_levels_fcst.append(level_fcst) %}
      {%- set tmp = valid_levels_obs.append(level_obs) %}
    {%- endfor %}

{#-
Make sure that the input forecast level (input_level_fcst) is set to a
valid value.
#}
    {%- if (input_level_fcst != 'all') and (input_level_fcst not in valid_levels_fcst) %}
      {%- set error_msg = '\n' ~
'The input forecast level (input_level_fcst) must be set either to \'all\'\n' ~
'or to one of the elements in the list of valid levels (valid_levels_fcst)\n' ~
'for the current forecast field (field_fcst).  This is not the case:\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  valid_levels_fcst = ' ~ valid_levels_fcst ~ '\n' ~
'  input_level_fcst = ' ~ input_level_fcst ~ '\n' %}
      {{metplus_macros.print_err_and_quit(error_msg)}}
    {%- endif %}

{#-
Add comment depending on whether or not the field is being treated
probabilistically.
#}
    {%- if treat_fcst_as_prob %}
# FREQ
# Process as probability
#
    {%- else %}
#
#Process as scalars for neighborhood methods
## Note that the number of forecast and obs thresholds must match
## but won't actually be applied to NBRCNT outputs with "nbrhd.field = OBS;"
#
    {%- endif %}

{#-
Loop over the (coupled) levels and corresponding lists of thresholds.
Extract from these the level values for forecasts and observations and
use them to set the forecast and observation field names, levels,
thresholds, and/or options in the METplus configuration file.
#}
    {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}

      {%- if delim_str in level_cpld %}
        {%- set level_fcst, level_obs = level_cpld.split(delim_str) %}
      {%- else %}
        {%- set level_fcst = level_cpld %}
        {%- set level_obs = level_cpld %}
      {%- endif %}

      {%- set valid_threshes_fcst = [] %}
      {%- set valid_threshes_obs = [] %}
      {%- for thresh_cpld in threshes_cpld %}
        {%- if delim_str in thresh_cpld %}
          {%- set thresh_fcst, thresh_obs = thresh_cpld.split(delim_str) %}
        {%- else %}
          {%- set thresh_fcst = thresh_cpld %}
          {%- set thresh_obs = thresh_cpld %}
        {%- endif %}
        {%- set tmp = valid_threshes_fcst.append(thresh_fcst) %}
        {%- set tmp = valid_threshes_obs.append(thresh_obs) %}
      {%- endfor %}

      {%- if (input_level_fcst == 'all') or (input_level_fcst == level_fcst) %}

        {%- for thresh_fcst in valid_threshes_fcst %}

          {%- if (input_thresh_fcst == 'all') or (input_thresh_fcst == thresh_fcst) %}
{#-
Increment the METplus variable counter.
#}
            {%- set ns.var_count = ns.var_count+1 %}

{#-
Set forecast field name.  Note that this has to exactly match the name
of the field in the input forecast file(s).

The input forecast files are generated by the MET/METplus GenEnsProd
tool.  That tool adds the field's level to the variable names in its
output file to ensure that all variables in the file have distinct names.
For example, if the same field, say APCP, is output at two different
levels, say at A3 and A6 (for APCP, "levels" are really accumulation
periods), there need to be two variables in the output file, and they
obviously can't both be named "APCP", so GenEnsProd names one "APCP_A3"
and the other "APCP_A6".  Here, the level is stored in the variable
level_fcst and, below, is included in the name of the forecast field.

For accumulated fields, the field name in the input forecast file contains
TWO references to the accumulation period.  The first is the level of the
forecast field added by GenEnsProd as described above.  The second is
another reference to this same level (accumulation period) but added by
the MET/METplus's PcpCombine tool (whose output file is the input into
GenEnsProd).  PcpCombine adds this reference to the level (really the
accumulation period) to the field's name for the same reason that
GenEnsProd does, i.e. to ensure that the names of variables in the output
file are distinct.  Here, this accumulation period is stored in the
variable accum_hh.  Thus, for accumulated fields, below we add both
accum_hh and level_fcst to the field name to get an exact field name
match.
#}
            {%- set thresh_fcst_and_or = thresh_fcst|replace("&&", ".and.") %}
            {%- set thresh_fcst_and_or = thresh_fcst_and_or|replace("||", ".or.") %}
            {%- if (input_field_group in ['APCP', 'ASNOW']) %}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}_{{accum_hh}}_{{level_fcst}}_ENS_FREQ_{{thresh_fcst_and_or}}
            {%- else %}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}_{{level_fcst}}_ENS_FREQ_{{thresh_fcst_and_or}}
            {%- endif %}

{#-
Set forecast field level.
#}
FCST_VAR{{ns.var_count}}_LEVELS = {{level_fcst}}

{#-
Set forecast field threshold.
Note that since the forecast field being read in is actually a field of
probabilities, we set the forecast threshold to a probabilistic one
(thresh_fcst_prob) and not to the physical threshold (thresh_fcst) in
the dictionary of forecast field names, levels, and thresholds that we
are looping over.
#}
FCST_VAR{{ns.var_count}}_THRESH = {{thresh_fcst_prob}}

{#-
Set forecast field options.
#}
            {%- set opts_indent_len = 20 %}
            {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
              {%- set opts_indent_len = opts_indent_len + 1 %}
            {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
              {%- set opts_indent_len = opts_indent_len + 2 %}
            {%- elif (ns.var_count > 999) %}
              {%- set opts_indent_len = opts_indent_len + 3 %}
            {%- endif %}
            {%- set opts_indent = ' '*opts_indent_len %}

            {%- if not treat_fcst_as_prob %}
FCST_VAR{{ns.var_count}}_OPTIONS = prob = FALSE;
            {%- endif %}

{#-
Set observation field name.  Note that this has to exactly match the name
of the field in the input observation file.

For accumulated fields, the input observation file is generated by MET's
PcpCombine tool.  In that file, the field name consists of the observation
field name here (field_obs) with the accumulation period appended to it
(separated by an underscore), so we must do the same here to get an exact
match.
#}
            {%- if (input_field_group in ['APCP', 'ASNOW']) %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}_{{accum_hh}}
            {%- else %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}
            {%- endif %}

{#-
Set observation field level.
#}
            {%- set indx_level_fcst = valid_levels_fcst.index(level_fcst) %}
            {%- set level_obs = valid_levels_obs[indx_level_fcst] %}
OBS_VAR{{ns.var_count}}_LEVELS = {{level_obs}}

{#-
Set observation field threshold.  Note that no observation thresholds
are included in the METplus configuration file if input_thresh_fcst is
set to 'none'.
#}
            {%- if (input_thresh_fcst != 'none') %}
{#-
Set the observation threshold.  This is given by the element in the list
of valid observation thresholds that has the same index as that of the
current forcast threshold (thresh_fcst) in the list of valid forecast
thresholds.
#}
              {%- set indx_thresh_fcst = valid_threshes_fcst.index(thresh_fcst) %}
              {%- set thresh_obs = valid_threshes_obs[indx_thresh_fcst] %}
OBS_VAR{{ns.var_count}}_THRESH = {{thresh_obs}}
            {%- endif %}

{#-
Set observation field options.
#}
            {%- set opts_indent_len = opts_indent_len - 1 %}
            {%- set opts_indent = ' '*opts_indent_len %}

            {%- if input_field_group == 'APCP' %}

              {%- if field_obs == 'APCP' %}
                {%- if not treat_fcst_as_prob %}
OBS_VAR{{ns.var_count}}_OPTIONS = nbrhd = { field = OBS; shape = SQUARE; width = [ 1 ]; vld_thresh = 1.0; }
                {%- endif %}
              {%- endif %}

            {%- elif input_field_group == 'ASNOW' %}

              {%- if field_obs == 'ASNOW' %}
                {%- if treat_fcst_as_prob %}
OBS_VAR{{ns.var_count}}_OPTIONS = convert(x) = 100.0*x;
                {%- else %}
OBS_VAR{{ns.var_count}}_OPTIONS = nbrhd = { field = OBS; shape = SQUARE; width = [ 1 ]; vld_thresh = 1.0; };
{{opts_indent}}convert(x) = 100.0*x;
                {%- endif %}
              {%- endif %}

            {%- elif input_field_group == 'REFC' %}

              {%- if field_obs == 'MergedReflectivityQCComposite' %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = lt-20;
{{opts_indent}}censor_val = -20.0;
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
                {%- if not treat_fcst_as_prob %}
{{opts_indent}}nbrhd = { field = OBS; shape = SQUARE; width = [ 1 ]; vld_thresh = 1.0; }
                {%- endif %}
              {%- endif %}

            {%- elif input_field_group == 'RETOP' %}

              {%- if field_obs == 'EchoTop18' %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = lt-20.0;
{{opts_indent}}censor_val = -20.0;
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
{{opts_indent}}convert(x) = x * 3280.84 * 0.001;
                {%- if not treat_fcst_as_prob %}
{{opts_indent}}nbrhd = { field = OBS; shape = SQUARE; width = [ 1 ]; vld_thresh = 1.0; }
                {%- endif %}
              {%- endif %}

            {%- endif %}

{#-
Print out a newline to separate the settings for the current field (both
forecast and observation settings) from those for the next field.
#}
            {{- '\n' }}

          {%- endif %}
        {%- endfor %}

      {%- endif %}

    {%- endfor %}
  {%- endfor %}
{%- endfor %}
#
# Forecast data time window(s).
#
{%- set comment_or_null = '' %}
{%- set obs_window_abs_val = '0' %}
{%- if input_field_group in ['REFC', 'RETOP'] %}
  {%- set comment_or_null = '#' %}
  {%- set obs_window_abs_val = '300' %}
{%- endif %}
{{comment_or_null}}FCST_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_BEGIN = 0
{{comment_or_null}}FCST_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_END = 0
#
# Observation data time window(s).
#
{#-
Use integers for seconds, but int can be changed to float if there is a
need to go to sub-seconds.
#}
OBS_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_BEGIN = {{ 0 - obs_window_abs_val|int }}
OBS_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_END = {{ obs_window_abs_val|int }}

# MET {{MetplusToolName}} neighborhood values
# See the MET User's Guide {{MetplusToolName}} section for more information
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_FIELD =

# width value passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_WIDTH =

# shape value passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_SHAPE =

# cov thresh list passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_COV_THRESH = >=0.5

# Set to true to run {{MetplusToolName}} separately for each field specified
# Set to false to create one run of {{MetplusToolName}} per run time that
#   includes all fields specified.
{{METPLUS_TOOL_NAME}}_ONCE_PER_FIELD = False
#
# Set to true if forecast data is probabilistic.
#
FCST_IS_PROB = True
FCST_PROB_IN_GRIB_PDS = False
#
# Only used if FCST_IS_PROB is true - sets probabilistic threshold
#
FCST_{{METPLUS_TOOL_NAME}}_PROB_THRESH = {{thresh_fcst_prob}}

{{METPLUS_TOOL_NAME}}_OUTPUT_PREFIX = {MODEL}_{{fieldname_in_met_filedir_names}}_{OBTYPE}

# Climatology data
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_DAY_INTERVAL =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_HOUR_INTERVAL =

#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_DAY_INTERVAL =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_HOUR_INTERVAL =

{%- set comment_or_null = '' %}
{%- if input_field_group in ['APCP', 'ASNOW'] %}
  {%- set comment_or_null = '#' %}
{%- endif %}

{{comment_or_null}}{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = True

{{METPLUS_TOOL_NAME}}_MASK_GRID =

# Statistical output types
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_FHO = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTC = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTS = NONE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTC = NONE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTS = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CNT = NONE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SL1L2 = NONE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SAL1L2 = NONE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VL1L2 = NONE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VAL1L2 = NONE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VCNT = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PCT = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PSTD = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PJC = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PRC = STAT
{%- if input_field_group in ['APCP', 'ASNOW'] %}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECLV = BOTH
{%- elif input_field_group in ['REFC', 'RETOP'] %}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECLV = NONE
{%- endif %}
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCTC = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCTS = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCNT = STAT
{%- if input_field_group in ['APCP', 'ASNOW'] %}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_GRAD = BOTH
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_DMAP = NONE
{%- elif input_field_group in ['REFC', 'RETOP'] %}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_GRAD = NONE
{%- endif %}

# NetCDF matched pairs output file
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_VAR_NAME =
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_LATLON = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_RAW = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_DIFF = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_CLIMO = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_WEIGHT = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_NBRHD = FALSE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_FOURIER = FALSE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_GRADIENT = FALSE
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_DISTANCE_MAP = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_APPLY_MASK = FALSE

# End of [config] section and start of [dir] section.
[dir]
#
# Directory containing observation input to {{MetplusToolName}}.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{obs_input_dir}}
#
# Directory containing forecast input to {{MetplusToolName}}.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR =
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR =
#
# Directory in which to write output from {{MetplusToolName}}.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{obs_input_fn_template}}
#
# Template for forecast input to {{MetplusToolName}} relative to
# FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_TEMPLATE =
#
# Variable used to specify one or more verification mask files for
# {{MetplusToolName}}.  Not used for this example.
#
{{METPLUS_TOOL_NAME}}_VERIFICATION_MASK_TEMPLATE = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
