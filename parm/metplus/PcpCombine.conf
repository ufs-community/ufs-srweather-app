{%- if FCST_OR_OBS == 'FCST' -%}
# PcpCombine METplus Configuration for Forecasts
{%- elif FCST_OR_OBS == 'OBS' -%}
# PcpCombine METplus Configuration for Observations
{%- endif %}

[config]

# List of applications (tools) to run.
PROCESS_LIST = PcpCombine

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{vx_leadhr_list}}

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = times
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {% raw %}{{% endraw %}{{FCST_OR_OBS}}_PCP_COMBINE_OUTPUT_DIR}/metplus_final.{{metplus_config_fn}}

{%- if FCST_OR_OBS == 'FCST' %}
#
# Run PcpCombine on forecast data but not observations (observation input
# files are not provided).
#
OBS_PCP_COMBINE_RUN = False
FCST_PCP_COMBINE_RUN = True
{%- elif FCST_OR_OBS == 'OBS' %}
#
# Run PcpCombine on observation data but not forecasts (forecast input
# files are not provided).
#
OBS_PCP_COMBINE_RUN = True
FCST_PCP_COMBINE_RUN = False
{%- endif %}
#
# Mode of PcpCombine to use (SUM, ADD, SUBTRACT, DERIVE, or CUSTOM).
#
{{FCST_OR_OBS}}_PCP_COMBINE_METHOD = ADD

{%- if (FCST_OR_OBS == 'FCST') %}
  {%- if (input_field_group == 'ASNOW') %}
#
# Specify name of variable for Snowfall Accumulation.
#
# NOTE:
# For forecasts, currently TSNOWP is used which is a constant-density
# estimate of snowfall accumulation.  In future RRFS development, a GSL
# product with variable-density snowfall accumulation is planned for UPP.
# When that is included and turned on in post, this variable may be
# changed to ASNOW.
#
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_NAMES = TSNOWP
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_LEVELS = A{{input_accum_hh}}
  {%- endif %}
{%- elif (FCST_OR_OBS == 'OBS') %}
  {%- if (input_field_group == 'ASNOW') %}
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_NAMES = ASNOW
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_LEVELS = A{{input_accum_hh}}
  {%- endif %}
{%- endif %}
#
# Specify how to name the array in the NetCDF file that PcpCombine
# generates.
#
# For accumulation variables (which is the only type of variable that we
# run PcpCombine on), we add the accumulation period to the variable name
# because this is how METplus normally sets names.  This is because,
# depending on the settings in the METplus configuration file, it is
# possible for a single NetCDF output file to contain output for multiple
# accumulations, so even though the "level" attribute of each accumulation
# variable in the output file will contain the level (e.g. "A1" or "A3"),
# the variable names for say the 1-hour and 3-hour accumulations would be
# the same (e.g. both would be "APCP"), which is not allowed and/or would
# cause overwriting of data.  To avoid this, METplus includes the level
# as part of the variable name, so we do the same here (even though in
# our case, it is not required because there will only be one variable in
# the output NetCDF file).
#
{%- if (input_field_group in ['APCP', 'ASNOW']) %}
{{FCST_OR_OBS}}_PCP_COMBINE_OUTPUT_NAME = {{fieldname_in_met_output}}_{{output_accum_hh}}
{%- else %}
{{FCST_OR_OBS}}_PCP_COMBINE_OUTPUT_NAME = {{fieldname_in_met_output}}
{%- endif %}
#
# Accumulation interval available in the input data.
#
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_ACCUMS = {{input_accum_hh}}
#
# Accumulation interval to generate in the output file.
#
{{FCST_OR_OBS}}_PCP_COMBINE_OUTPUT_ACCUM = {{output_accum_hh}}
#
# If the output NetCDF file already exists, specify whether or not to
# skip the call to PcpCombine.
#
# In general, relaunching a task in the SRW App should recreate all the
# output from that task regardless of whether or not that output already
# exists.  This is the case when running the PcpCombine task on forecasts.
# Thus, for forecasts, we set the skip flag to False.  However, it turns
# out that when running PcpCombine on observations, it is necessary to
# skip the call to PcpCombine (i.e. NOT recreate output files) because
# in the SRW App's workflow, more than one cycle may want to create the
# same output observation file.  This can happen if the forecast periods
# from two or more forecasts overlap, e.g. forecast 1 starts at 00Z of
# day one and forecast 2 starts at 00Z of day 2, and the forecasts are
# both 36 hours long, so the last 12 hours of forecast 1 overlap with the
# first 12 hours of forecast 2.  In this case, there will be two workflow
# tasks that will try to create the observation APCP files for those 12
# hours, and the files will be named exactly the same (because the output
# naming convention in this conf file is based on valid times).  Thus, in
# order to avoid (1) duplicating work and (2) having two tasks accidentally
# trying to write to the same file (which will cause at least one task to
# fail), when running PcpCombine on observations we want to skip the call
# if the output observation file(s) (for a given forecast hour) already
# exist.  For this reason, for observations we set the skip flag to False
# but set it to True for forecasts.
#
{%- if FCST_OR_OBS == 'FCST' %}
# Since this METplus configuration file takes forecast files as inputs, 
# we set this flag to False.
#
PCP_COMBINE_SKIP_IF_OUTPUT_EXISTS = False
{%- elif FCST_OR_OBS == 'OBS' %}
# Since this METplus configuration file takes observation files as inputs, 
# we set this flag to True.
#
PCP_COMBINE_SKIP_IF_OUTPUT_EXISTS = True
{%- endif %}

{%- if FCST_OR_OBS == 'FCST' %}
#
# Maximum forecast lead to allow when searching for model data to use in
# PcpCombine.  Default is a very large time (4000 years) so setting this
# to a valid maximum value can speed up execution time of numerous runs.
#
FCST_PCP_COMBINE_MAX_FORECAST = 2d
#
# Keep initialization time constant.
#
FCST_PCP_COMBINE_CONSTANT_INIT = True
{%- endif %}

{%- if FCST_OR_OBS == 'OBS' %}
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
{%- endif %}
#
# Specify file type of input data.
#
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_DATATYPE = GRIB

# End of [config] section and start of [dir] section.
[dir]
#
# Directory containing input files.
#
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_DIR = {{input_dir}}
#
# Directory in which to write output from PcpCombine.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
{{FCST_OR_OBS}}_PCP_COMBINE_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Input file name template relative to {{FCST_OR_OBS}}_PCP_COMBINE_INPUT_DIR.
#
{{FCST_OR_OBS}}_PCP_COMBINE_INPUT_TEMPLATE = {{input_fn_template}}
#
# Output file name template relative to {{FCST_OR_OBS}}_PCP_COMBINE_OUTPUT_DIR.
#
{{FCST_OR_OBS}}_PCP_COMBINE_OUTPUT_TEMPLATE = {{output_fn_template}}
