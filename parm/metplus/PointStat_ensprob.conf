# Ensemble probabilistic {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{vx_leadhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to {{MetplusToolName}}.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
{{METPLUS_TOOL_NAME}}_CONFIG_FILE = {PARM_BASE}/met_config/{{MetplusToolName}}Config_wrapped

{{METPLUS_TOOL_NAME}}_OBS_QUALITY_INC = 0, 1, 2, 3, 9, NA
#{{METPLUS_TOOL_NAME}}_OBS_QUALITY_EXC =

{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD = NEAREST
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_TIME_INTERP_METHOD =

#{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_INTERP_SHAPE =
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = BILIN
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 2

#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_FHO =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTS =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTS =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CNT =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SL1L2 =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SAL1L2 =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VL1L2 =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VAL1L2 =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VCNT =
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PCT = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PSTD = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PJC = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PRC = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECNT =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RPS =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECLV =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MPR =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ORANK =

{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = True

#{{METPLUS_TOOL_NAME}}_HSS_EC_VALUE =

#
# Observation data time window(s).
#
OBS_WINDOW_BEGIN = -1799
OBS_WINDOW_END = 1800
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = {OBS_WINDOW_END}

# Optional list of offsets to look for point observation data
{{METPLUS_TOOL_NAME}}_OFFSETS = 0
#
# Name to identify model (forecast) data in output.
#
# The variable MODEL is recorded in the stat files, and the data in
# these files is then plotted (e.g. using METViewer).  Here, we add a
# suffix to MODEL that identifies the data as ensemble-probabilistic.
# This makes it easier to identify each curve.
#
MODEL = {{vx_fcst_model_name}}_ensprob
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Value to enter under the DESC column in the output stat file.
#
{{METPLUS_TOOL_NAME}}_DESC = NA

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = NONE
{{METPLUS_TOOL_NAME}}_REGRID_METHOD = BILIN
{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2

{{METPLUS_TOOL_NAME}}_OUTPUT_PREFIX = {MODEL}_{{fieldname_in_met_filedir_names}}_{OBTYPE}

# sets the -obs_valid_beg command line argument (optional)
# not used for this example
#{{METPLUS_TOOL_NAME}}_OBS_VALID_BEG = {valid?fmt=%Y%m%d_%H}

# sets the -obs_valid_end command line argument (optional)
# not used for this example
#{{METPLUS_TOOL_NAME}}_OBS_VALID_END = {valid?fmt=%Y%m%d_%H}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
{{METPLUS_TOOL_NAME}}_GRID =

# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the METplus {{MetplusToolName}} configuration file.
{{METPLUS_TOOL_NAME}}_POLY = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
{{METPLUS_TOOL_NAME}}_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE = {{fieldname_in_met_filedir_names}}

# set to True to run {{MetplusToolName}} once for each name/level combination
# set to False to run {{MetplusToolName}} once per run time including all fields
{{METPLUS_TOOL_NAME}}_ONCE_PER_FIELD = False
#
# List of forecast and corresponding observation fields to process.
# Note that the forecast variable name must exactly match the name of a
# variable in the forecast input file(s).
#
{#-
Import the file containing jinja macros.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}

{#-
Set the probabilistic threshold to be used for the forecast field.  If
necessary, this can be changed to be an input parameter in the calling
script instead of a hard-coded value as below.
#}
{%- set thresh_fcst_prob = '==0.1' %}

{#-
Jinja requires certain variables to be defined globally within the template
before they can be used in if-statements and other scopes (see Jinja scoping
rules).  Define such variables.
#}
{%- set indx_level_fcst = '' %}
{%- set indx_thresh_fcst = '' %}
{%- set error_msg = '' %}
{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}

{%- set field_fcst = '' %}
{%- set field_obs = '' %}
{%- set level_fcst = '' %}
{%- set level_obs = '' %}
{%- set thresh_fcst = '' %}
{%- set thresh_obs = '' %}
{%- set thresh_fcst_and_or = '' %}

{#-
Get the set of valid field groups and ensure that the specified input
field group appears in this list.
#}
{%- set valid_field_groups = vx_config_dict.keys()|list %}
{{- metplus_macros.check_field_group(valid_field_groups, input_field_group) }}

{#-
Reset the input forecast level so that if it happens to be an accumulation
(e.g. 'A03'), the leading zeros in front of the hour are stipped out (e.g.
reset to 'A3').
#}
{%- set input_level_fcst = metplus_macros.get_accumulation_no_zero_pad(input_level_fcst) %}

{#-
Extract from the configuration dictionary the set (which itself is a
dictionary) of fields, levels, and thresholds corresponding to the input
field group.  Then set the delimiter string that separates forecast and
observation values in the various items (i.e. dictionary keys and values
representing field names, levels, and thresholds) in this dictionary.
#}
{%- set fields_levels_threshes_cpld = vx_config_dict[input_field_group] %}
{%- set delim_str = metplus_macros.set_delim_str() %}

{#-
Loop over the fields and set field names, levels, thresholds, and/or
options for each field, both for forecasts and for observations, in the
METplus configuration file.
#}
{%- set ns = namespace(var_count = 0) %}
{#-
This outer for-loop is included to make this code as similar as possible
to the one in GridStat_ensprob.conf.  There, treat_fcst_as_prob takes on
both True and False values, although here it only takes on the value
True (which makes the loop redundant).  It is not clear why it doesn't
need to be set to False.  This is being investigated (12/13/2023).
#}
{%- for treat_fcst_as_prob in [True] %}

  {%- for field_cpld, levels_threshes_cpld in fields_levels_threshes_cpld.items() %}

    {%- if delim_str in field_cpld %}
      {%- set field_fcst, field_obs = field_cpld.split(delim_str) %}
    {%- else %}
      {%- set field_fcst = field_cpld %}
      {%- set field_obs = field_cpld %}
    {%- endif %}

{#-
For convenience, create lists of valid forecast and observation levels
for the current field.
#}
    {%- set valid_levels_fcst = [] %}
    {%- set valid_levels_obs = [] %}
    {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}
      {%- if delim_str in level_cpld %}
        {%- set level_fcst, level_obs = level_cpld.split(delim_str) %}
      {%- else %}
        {%- set level_fcst = level_cpld %}
        {%- set level_obs = level_cpld %}
      {%- endif %}
      {%- set tmp = valid_levels_fcst.append(level_fcst) %}
      {%- set tmp = valid_levels_obs.append(level_obs) %}
    {%- endfor %}

{#-
Make sure that the input forecast level (input_level_fcst) is set to a
valid value.
#}
    {%- if (input_level_fcst != 'all') and (input_level_fcst not in valid_levels_fcst) %}
      {%- set error_msg = '\n' ~
'The input forecast level (input_level_fcst) must be set either to \'all\'\n' ~
'or to one of the elements in the list of valid levels (valid_levels_fcst)\n' ~
'for the current forecast field (field_fcst).  This is not the case:\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  valid_levels_fcst = ' ~ valid_levels_fcst ~ '\n' ~
'  input_level_fcst = ' ~ input_level_fcst ~ '\n' %}
      {{metplus_macros.print_err_and_quit(error_msg)}}
    {%- endif %}

{#-
Loop over the (coupled) levels and corresponding lists of thresholds.
Extract from these the level values for forecasts and observations and
use them to set the forecast and observation field names, levels,
thresholds, and/or options in the METplus configuration file.
#}
    {%- for level_cpld, threshes_cpld in levels_threshes_cpld.items() %}

      {%- if delim_str in level_cpld %}
        {%- set level_fcst, level_obs = level_cpld.split(delim_str) %}
      {%- else %}
        {%- set level_fcst = level_cpld %}
        {%- set level_obs = level_cpld %}
      {%- endif %}

      {%- set valid_threshes_fcst = [] %}
      {%- set valid_threshes_obs = [] %}
      {%- for thresh_cpld in threshes_cpld %}
        {%- if delim_str in thresh_cpld %}
          {%- set thresh_fcst, thresh_obs = thresh_cpld.split(delim_str) %}
        {%- else %}
          {%- set thresh_fcst = thresh_cpld %}
          {%- set thresh_obs = thresh_cpld %}
        {%- endif %}
        {%- set tmp = valid_threshes_fcst.append(thresh_fcst) %}
        {%- set tmp = valid_threshes_obs.append(thresh_obs) %}
      {%- endfor %}

      {%- if (input_level_fcst == 'all') or (input_level_fcst == level_fcst) %}

        {%- for thresh_fcst in valid_threshes_fcst %}

          {%- if (input_thresh_fcst == 'all') or (input_thresh_fcst == thresh_fcst) %}
{#-
Increment the METplus variable counter.
#}
            {%- set ns.var_count = ns.var_count+1 %}

{#-
Set forecast field name.
#}
            {%- set thresh_fcst_and_or = thresh_fcst|replace("&&", ".and.") %}
            {%- set thresh_fcst_and_or = thresh_fcst_and_or|replace("||", ".or.") %}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}_{{level_fcst}}_ENS_FREQ_{{thresh_fcst_and_or}}

{#-
Set forecast field level.
#}
FCST_VAR{{ns.var_count}}_LEVELS = {{level_fcst}}

{#-
Set forecast field threshold.
Note that since the forecast field being read in is actually a field of
probabilities, we set the forecast threshold to a probabilistic one
(thresh_fcst_prob) and not to the physical threshold (thresh_fcst) in
the dictionary of forecast field names, levels, and thresholds that we
are looping over.
#}
FCST_VAR{{ns.var_count}}_THRESH = {{thresh_fcst_prob}}

{#-
Set forecast field options.
#}
            {%- set opts_indent_len = 20 %}
            {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
              {%- set opts_indent_len = opts_indent_len + 1 %}
            {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
              {%- set opts_indent_len = opts_indent_len + 2 %}
            {%- elif (ns.var_count > 999) %}
              {%- set opts_indent_len = opts_indent_len + 3 %}
            {%- endif %}
            {%- set opts_indent = ' '*opts_indent_len %}

            {%- if input_field_group == 'ADPSFC' %}

              {%- if field_fcst == 'HGT' %}
FCST_VAR{{ns.var_count}}_OPTIONS = desc = "CEILING";
              {%- elif field_fcst == 'VIS' %}
FCST_VAR{{ns.var_count}}_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }
              {%- endif %}

            {%- endif %}

{#-
Set observation field name.
#}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}

{#-
Set observation field level.
#}
            {%- set indx_level_fcst = valid_levels_fcst.index(level_fcst) %}
            {%- set level_obs = valid_levels_obs[indx_level_fcst] %}
OBS_VAR{{ns.var_count}}_LEVELS = {{level_obs}}

{#-
Set observation field threshold.  Note that no observation thresholds
are included in the METplus configuration file if input_thresh_fcst is
set to 'none'.
#}
            {%- if (input_thresh_fcst != 'none') %}
{#-
Set the observation threshold.  This is given by the element in the list
of valid observation thresholds that has the same index as that of the
current forcast threshold (thresh_fcst) in the list of valid forecast
thresholds.
#}
              {%- set indx_thresh_fcst = valid_threshes_fcst.index(thresh_fcst) %}
              {%- set thresh_obs = valid_threshes_obs[indx_thresh_fcst] %}
OBS_VAR{{ns.var_count}}_THRESH = {{thresh_obs}}
            {%- endif %}

{#-
Set observation field options.
#}
            {%- set opts_indent_len = opts_indent_len - 1 %}
            {%- set opts_indent = ' '*opts_indent_len %}

            {%- if input_field_group == 'ADPSFC' %}

              {%- if field_obs == 'CEILING' %}
OBS_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215;
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
              {%- elif field_obs == 'VIS' %}
OBS_VAR{{ns.var_count}}_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }
              {%- endif %}

            {%- elif input_field_group == 'ADPUPA' %}

              {%- if field_obs == 'CAPE' %}
OBS_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
              {%- elif field_obs == 'PBL' %}
OBS_VAR{{ns.var_count}}_OPTIONS = desc = "TKE";
              {%- endif %}

            {%- endif %}

{#-
Print out a newline to separate the settings for the current field (both
forecast and observation settings) from those for the next field.
#}
            {{- '\n' }}

          {%- endif %}
        {%- endfor %}

      {%- endif %}

    {%- endfor %}
  {%- endfor %}
{%- endfor %}
#
# Forecast data description variables
#
FCST_IS_PROB = True
FCST_PROB_IN_GRIB_PDS = False

# End of [config] section and start of [dir] section.
[dir]
#
# Directory containing observation input to {{MetplusToolName}}.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{obs_input_dir}}
#
# Directory containing forecast input to {{MetplusToolName}}.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR =
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR =
#
# Directory in which to write output from {{MetplusToolName}}.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{obs_input_fn_template}}
#
# Template for forecast input to {{MetplusToolName}} relative to
# FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_TEMPLATE =
