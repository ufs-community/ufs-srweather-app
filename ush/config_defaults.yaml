#----------------------------
# Test description
#----------------------------
metadata:
  description: >-
    Default configuration for an experiment. The valid values for most of the
    parameters are specified in valid_param_vals.yaml
###
# USER-related configuration parameters
#
user:

  ###
  # (Default: ``"nco"``)
  # 
  # This variable determines the workflow mode. The user can choose between two options: "nco" and "community". The "nco" mode uses a directory structure that mimics what is used in operations at NOAA/NCEP Central Operations (NCO) and at the NOAA/NCEP/Environmental Modeling Center (EMC), which works with NCO on pre-implementation testing. Specifics of the conventions used in "nco" mode can be found in the following :nco:`WCOSS Implementation Standards <>` document:
  #
  #   | NCEP Central Operations
  #   | WCOSS Implementation Standards
  #   | January 19, 2022
  #   | Version 11.0.0
  #
  # Setting ``RUN_ENVIR`` to "community" is recommended in most cases for users who are not running in NCO's production environment. Valid values: ``"nco"`` | ``"community"``
  #
  RUN_ENVIR: "nco"
  #
  #-----------------------------------------------------------------------
  #
  # Set machine and queue parameters.  Definitions:
  #
  # MACHINE:
  # Machine on which the workflow will run. If you are NOT on a named,
  # supported platform, and you want to use the Rocoto workflow manager,
  # you will need set MACHINE: "linux" and WORKFLOW_MANAGER: "rocoto". This
  # combination will assume a Slurm batch manager when generating the XML.
  # Please see ush/valid_param_vals.yaml for a full list of supported
  # platforms.
  #
  # ACCOUNT:
  # The account under which to submit jobs to the queue.
  #
  # HOMEdir: 
  # The path to the user's ufs-srweather-app clone. This path 
  # is set in ush/setup.py as the parent directory to USHdir. 
  #
  # USHdir: 
  # The path to the user's ush directory in their ufs-srweather-app clone. 
  # This path is set automatically in the main function of setup.py and 
  # corresponds to the location of setup.py (i.e., the ush directory).
  # 
  # SCRIPTSdir: 
  # The path to the user's scripts directory in their ufs-srweather-app clone.
  # 
  # JOBSdir: 
  # The path to the user's jobs directory in their ufs-srweather-app clone.
  # 
  # SORCdir: 
  # The path to the user's sorc directory in their ufs-srweather-app clone.
  # 
  # PARMdir: 
  # The path to the user's parm directory in their ufs-srweather-app clone.
  # 
  # MODULESdir: 
  # The path to the user's modulefiles directory in their ufs-srweather-app 
  # clone.
  # 
  # EXECdir: 
  # The path to the user's exec directory in their ufs-srweather-app clone.
  #
  # METPLUS_CONF: 
  # The path to the user's final METplus configuration file. By default, 
  # METplus configuration files reside in ufs-srweather-app/parm/metplus.
  #  
  # UFS_WTHR_MDL_DIR: 
  # The path to the location where the weather 
  # model code is located within the ufs-srweather-app clone. This 
  # parameter is set in setup.py and uses information from the 
  # Externals.cfg file to build the correct path. It is built with 
  # knowledge of HOMEdir and often corresponds to ufs-srweather-app/
  # sorc/ufs-weather-model.
  # 
  # ARL_NEXUS_DIR: 
  # The path to the user's NEXUS directory. By default, NEXUS source 
  # code resides in ufs-srweather-app/sorc/arl_nexus
  # 
  #-----------------------------------------------------------------------
  MACHINE: "BIG_COMPUTER"
  ACCOUNT: ""

  HOMEdir: '{{ user.HOMEdir }}'
  USHdir: '{{ user.USHdir }}'
  SCRIPTSdir: '{{ [HOMEdir, "scripts"]|path_join }}'
  JOBSdir: '{{ [HOMEdir, "jobs"]|path_join }}'
  SORCdir: '{{ [HOMEdir, "sorc"]|path_join }}'
  PARMdir: '{{ [HOMEdir, "parm"]|path_join }}'
  MODULESdir: '{{ [HOMEdir, "modulefiles"]|path_join }}'
  EXECdir: '{{ [HOMEdir, workflow.EXEC_SUBDIR]|path_join }}'
  METPLUS_CONF: '{{ [PARMdir, "metplus"]|path_join }}'
  UFS_WTHR_MDL_DIR: '{{ user.UFS_WTHR_MDL_DIR }}'
  ARL_NEXUS_DIR: '{{ [SORCdir, "arl_nexus"]|path_join }}'

#----------------------------
# PLATFORM config parameters
#-----------------------------
platform:
  #
  #-----------------------------------------------------------------------
  #
  # WORKFLOW_MANAGER:
  # The workflow manager to use (e.g., rocoto). This is set to "none" by
  # default, but if the machine name is set to a platform that supports
  # Rocoto, this will be overwritten and set to "rocoto". If set
  # explicitly to "rocoto" along with the use of the MACHINE: "linux" target,
  # the configuration layer assumes a Slurm batch manager when generating
  # the XML. Valid options: "rocoto" or "none"
  #
  # NCORES_PER_NODE:
  # The number of cores available per node on the compute platform, now 
  # configurable for all platforms.
  #
  # TASKTHROTTLE:
  # The number of active tasks run simultaneously. For linux/mac setting this
  # to 1 makes sense
  #
  # BUILD_MOD_FN:
  # Name of an alternative build modulefile to use if using an
  # unsupported platform. Is set automatically for supported machines.
  #
  # WFLOW_MOD_FN:
  # Name of alternative workflow modulefile to use if using an
  # unsupported platform. Is set automatically for supported machines.
  #
  # BUILD_VER_FN:
  # File name containing the version of the modules used for building the App.
  # Currently, only WCOSS2 uses this file.
  #
  # RUN_VER_FN:
  # File name containing the version of the modules used for running the App.
  # Currently, only WCOSS2 uses this file.
  #
  # SCHED:
  # The job scheduler to use (e.g., Slurm). Set this to an empty string in
  # order for the experiment generation script to set it depending on the
  # machine.
  #
  # PARTITION_DEFAULT:
  # If using the slurm job scheduler (i.e. if SCHED is set to "slurm"), 
  # the default partition to which to submit workflow tasks.  If a task 
  # does not have a specific variable that specifies the partition to which 
  # it will be submitted (e.g. PARTITION_HPSS, PARTITION_FCST; see below), 
  # it will be submitted to the partition specified by this variable.  If 
  # this is not set or is set to an empty string, it will be (re)set to a 
  # machine-dependent value.  This is not used if SCHED is not set to 
  # "slurm".
  #
  # QUEUE_DEFAULT:
  # The default queue or QOS (if using the slurm job scheduler, where QOS
  # is Quality of Service) to which workflow tasks are submitted.  If a 
  # task does not have a specific variable that specifies the queue to which 
  # it will be submitted (e.g. QUEUE_HPSS, QUEUE_FCST; see below), it will 
  # be submitted to the queue specified by this variable.  If this is not 
  # set or is set to an empty string, it will be (re)set to a machine-
  # dependent value.
  #
  # PARTITION_HPSS:
  # If using the slurm job scheduler (i.e. if SCHED is set to "slurm"), 
  # Tasks that get or create links to external 
  # model files [which are needed to generate initial conditions (ICs) and 
  # lateral boundary conditions (LBCs)] are submitted to this partition.  If this is not set 
  # or is set to an empty string, it will be (re)set to a machine-dependent 
  # value.  This is not used if SCHED is not set to "slurm".
  #
  # QUEUE_HPSS:
  # Tasks that get or create links to external 
  # model files [which are needed to generate initial conditions (ICs) and 
  # lateral boundary conditions (LBCs)] are submitted to this queue or QOS.  If this is not set 
  # or is set to an empty string, it will be (re)set to a machine-dependent 
  # value.
  #
  # PARTITION_FCST:
  # If using the slurm job scheduler (i.e. if SCHED is set to "slurm"), 
  # The task that runs forecasts is submitted to this partition.  If 
  # this is not set or set to an empty string, it will be (re)set to a 
  # machine-dependent value.  This is not used if SCHED is not set to 
  # "slurm".
  #
  # QUEUE_FCST:
  # The task that runs a forecast is submitted to this queue or QOS.  
  # If this is not set or set to an empty string, it will be (re)set to a 
  # machine-dependent value.
  #
  # REMOVE_MEMORY:
  # Boolean flag determining whether to remove the memory flag for the
  # Rocoto XML. Some platforms are not configured to accept the memory
  # flag, so must not be included at all in the XML.
  #-----------------------------------------------------------------------
  #
  WORKFLOW_MANAGER: ""
  NCORES_PER_NODE: ""
  TASKTHROTTLE: 1000
  BUILD_MOD_FN: 'build_{{ user.MACHINE|lower() }}_{{ workflow.COMPILER }}'
  WFLOW_MOD_FN: 'wflow_{{ user.MACHINE|lower() }}'
  BUILD_VER_FN: 'build.ver.{{ user.MACHINE|lower() }}'
  RUN_VER_FN: 'run.ver.{{ user.MACHINE|lower() }}'
  SCHED: ""
  PARTITION_DEFAULT: ""
  QUEUE_DEFAULT: ""
  PARTITION_HPSS: ""
  QUEUE_HPSS: ""
  PARTITION_FCST: ""
  QUEUE_FCST: ""
  REMOVE_MEMORY: False
  #
  #-----------------------------------------------------------------------
  #
  # Set run commands for platforms without a workflow manager. These values
  # will be ignored unless WORKFLOW_MANAGER: "none".  Definitions:
  #
  # RUN_CMD_UTILS:
  # The run command for MPI-enabled pre-processing utilities (shave, orog, sfc_climo_gen, 
  # etc.) Can be left blank for smaller domains, in which case the executables 
  # will run without MPI.
  #
  # RUN_CMD_FCST:
  # The run command for the model forecast step. 
  #
  # RUN_CMD_POST:
  # The run command for post-processing (UPP). Can be left blank for smaller 
  # domains, in which case UPP will run without MPI.
  #
  # RUN_CMD_PRDGEN: 
  # The run command for the product generation job.
  #
  # RUN_CMD_SERIAL:
  # The run command for some serial jobs 
  #
  # RUN_CMD_NEXUS:
  # The run command for the AQM NEXUS tasks.
  #
  # RUN_CMD_AQMLBC:
  # The run command for the AQM_LBCS task.
  #
  #-----------------------------------------------------------------------
  #
  RUN_CMD_SERIAL: ""
  RUN_CMD_UTILS: ""
  RUN_CMD_FCST: ""
  RUN_CMD_POST: ""
  RUN_CMD_PRDGEN: ""
  RUN_CMD_NEXUS: ""
  RUN_CMD_AQMLBC: ""
  #
  #-----------------------------------------------------------------------
  #
  # Allows an extra parameter to be passed to SCHEDULER (SLURM/PBSPRO) via 
  # XML Native command
  #
  SCHED_NATIVE_CMD: ""
  #
  #-----------------------------------------------------------------------
  # Pre task commands such as "ulimit" needed by tasks
  #-----------------------------------------------------------------------
  #
  PRE_TASK_CMDS: ""
  #
  #-----------------------------------------------------------------------
  #
  # DOMAIN_PREGEN_BASEDIR:
  # The base directory containing pregenerated grid, orography, and surface 
  # climatology files. This is an alternative for setting GRID_DIR,
  # OROG_DIR, and SFC_CLIMO_DIR individually
  # 
  # For the pregenerated grid specified by PREDEF_GRID_NAME, 
  # these "fixed" files are located in:
  #
  #   ${DOMAIN_PREGEN_BASEDIR}/${PREDEF_GRID_NAME}
  #
  # The workflow scripts will create a symlink in the experiment directory
  # that will point to a subdirectory (having the name of the grid being
  # used) under this directory.  This variable should be set to a null 
  # string in this file, but it can be specified in the user-specified 
  # workflow configuration file (EXPT_CONFIG_FN).
  #
  #-----------------------------------------------------------------------
  #
  DOMAIN_PREGEN_BASEDIR: ""
  #
  #-----------------------------------------------------------------------
  # Test directories used in run_WE2E script
  #-----------------------------------------------------------------------
  # TEST_EXTRN_MDL_SOURCE_BASEDIR: 
  # This parameter allows testing of user-staged files in a known location 
  # on a given platform. This path contains a limited dataset and likely 
  # will not be useful for most user experiments. 
  # 
  # TEST_AQM_INPUT_BASEDIR: 
  # The path to user-staged AQM fire emission data for WE2E testing. 
  # 
  # TEST_PREGEN_BASEDIR: 
  # Similar to DOMAIN_PREGEN_BASEDIR, this variable sets the base 
  # directory containing pregenerated grid, orography, and surface 
  # climatology files for WE2E tests. This is an alternative for setting 
  # GRID_DIR, OROG_DIR, and SFC_CLIMO_DIR individually. 
  # 
  # TEST_ALT_EXTRN_MDL_SYSBASEDIR_ICS: 
  # This parameter is used to test the mechanism that allows users to 
  # point to a data stream on disk. It sets up a sandbox location that 
  # mimics the stream in a more controlled way and tests the ability 
  # to access ICS. 
  # 
  # TEST_ALT_EXTRN_MDL_SYSBASEDIR_LBCS: 
  # This parameter is used to test the mechanism that allows users to 
  # point to a data stream on disk. It sets up a sandbox location that 
  # mimics the stream in a more controlled way and tests the ability 
  # to access LBCS.
  # 
  # TEST_CCPA_OBS_DIR, TEST_MRMS_OBS_DIR, TEST_NDAS_OBS_DIR: 
  # These parameters are used by the testing script to test the mechanism 
  # that allows user to point to data streams on disk for observation data 
  # for verification tasks. They test the ability for users to set 
  # CCPA_OBS_DIR, MRMS_OBS_DIR, and NDAS_OBS_DIR respectively.
  # 
  # TEST_VX_FCST_INPUT_BASEDIR: 
  # The path to user-staged forecast files for WE2E testing of verificaton 
  # using user-staged forecast files in a known location on a given platform. 
  #
  #-----------------------------------------------------------------------
  #
  TEST_EXTRN_MDL_SOURCE_BASEDIR: ""
  TEST_AQM_INPUT_BASEDIR: ""
  TEST_PREGEN_BASEDIR: ""
  TEST_ALT_EXTRN_MDL_SYSBASEDIR_ICS: ""
  TEST_ALT_EXTRN_MDL_SYSBASEDIR_LBCS: ""
  TEST_CCPA_OBS_DIR: ""
  TEST_MRMS_OBS_DIR: ""
  TEST_NDAS_OBS_DIR: ""
  TEST_VX_FCST_INPUT_BASEDIR: ""
  #
  #-----------------------------------------------------------------------
  #
  # Set parameters associated with the fixed (i.e. static) files.  Definitions:
  #
  # FIXgsm:
  # System directory in which the majority of fixed (i.e. time-independent) 
  # files that are needed to run the FV3-LAM model are located
  #
  # FIXaer:
  # System directory where MERRA2 aerosol climatology files are located.
  # Only used if running with a physics suite that uses Thompson microphysics.
  #
  # FIXlut:
  # System directory where the lookup tables for optics properties are located.
  # Only used if running with a physics suite that uses Thompson microphysics.
  #
  # FIXorg:
  # System directory where orography data are located
  #
  # FIXsfc:
  # System directory where surface climatology data are located
  #
  # FIXshp:
  # System directory where the graphics shapefiles are located.
  # 
  # FIXaqm:
  # System directory where AQM data files are located
  #
  # FIXemis:
  # System directory where AQM emission data files are located.
  #
  # FIXcrtm:
  # System directory where CRTM fixed files are located
  #
  # FIXcrtmupp:
  # System directory where CRTM fixed files specifically for UPP are located
  #
  #-----------------------------------------------------------------------
  #
  FIXgsm: ""
  FIXaer: ""
  FIXlut: ""
  FIXorg: ""
  FIXsfc: ""
  FIXshp: ""
  FIXaqm: ""
  FIXemis: ""
  FIXcrtm: ""
  FIXcrtmupp: ""
  #
  #-----------------------------------------------------------------------
  #
  # EXTRN_MDL_DATA_STORES:
  # A list of data stores where the scripts should look for external model
  # data. The list is in priority order. If disk information is provided
  # via USE_USER_STAGED_EXTRN_FILES or a known location on the platform,
  # the disk location will be highest priority. Options are disk, hpss,
  # aws, and nomads.
  #
  #-----------------------------------------------------------------------
  #
  EXTRN_MDL_DATA_STORES: ""
#-----------------------------
# WORKFLOW config parameters
#-----------------------------
workflow:
  #
  #-----------------------------------------------------------------------
  #
  # Unique ID for workflow run that will be set in setup.py
  #
  #-----------------------------------------------------------------------
  #
  WORKFLOW_ID: ""
  #
  #-----------------------------------------------------------------------
  #
  # How to make links. Relative links by default. Empty string for
  # absolute paths in links.
  #
  #-----------------------------------------------------------------------
  #
  RELATIVE_LINK_FLAG: "--relative"
  #
  #-----------------------------------------------------------------------
  #
  # Set cron-associated parameters.  Definitions:
  #
  # USE_CRON_TO_RELAUNCH:
  # Flag that determines whether to add a line to the user's cron 
  # table to call the experiment launch script every CRON_RELAUNCH_INTVL_MNTS 
  # minutes.
  #
  # CRON_RELAUNCH_INTVL_MNTS:
  # The interval (in minutes) between successive calls of the experiment
  # launch script by a cron job to (re)launch the experiment (so that the
  # workflow for the experiment kicks off where it left off).
  #
  # CRONTAB_LINE: 
  # The launch command that will appear in the crontab
  #
  # LOAD_MODULES_RUN_TASK_FP: 
  # Path to load_modules_run_task.sh.
  #-----------------------------------------------------------------------
  #
  USE_CRON_TO_RELAUNCH: false
  CRON_RELAUNCH_INTVL_MNTS: 3
  CRONTAB_LINE: ""
  LOAD_MODULES_RUN_TASK_FP: '{{ [user.USHdir, "load_modules_run_task.sh"]|path_join }}'

  #
  #-----------------------------------------------------------------------
  #
  # Set directories.  Definitions:
  #
  # EXPT_BASEDIR:
  # The base directory in which the experiment directory will be created.  
  # If this is not specified or if it is set to an empty string, it will
  # default to ${HOMEdir}/../expt_dirs. If set to a relative path, the
  # path will be appended to the default value ${HOMEdir}/../expt_dirs 
  #
  # EXPT_SUBDIR:
  # If EXPTDIR is not specified, this represents the experiment directory 
  # (not the full path)
  #
  # EXEC_SUBDIR:
  # The name of the subdirectory of ufs-srweather-app where executables are
  # installed.
  #
  # EXPTDIR:
  # The full path to the experiment directory. Can be user-specified, but by
  # default will point to:
  #
  #   EXPTDIR: "${EXPT_BASEDIR}/${EXPT_SUBDIR}"
  #
  # WFLOW_FLAG_FILES_DIR:
  # Directory in which flag files marking completion of various workflow
  # tasks can be placed.
  #-----------------------------------------------------------------------
  #
  EXPT_BASEDIR: '' # This will be set in setup.py prior to extend_yaml() being called
  EXPT_SUBDIR: 'experiment'
  EXEC_SUBDIR: "exec"
  EXPTDIR: '{{ [workflow.EXPT_BASEDIR, workflow.EXPT_SUBDIR]|path_join }}'
  WFLOW_FLAG_FILES_DIR: '{{ [workflow.EXPTDIR, "wflow_flag_files"]|path_join }}'
  #
  #-----------------------------------------------------------------------
  #
  # Set the separator character(s) to use in the names of the grid, mosaic,
  # and orography fixed files.
  #
  # Ideally, the same separator should be used in the names of these fixed
  # files as in the surface climatology fixed files (which always use a "."
  # as the separator), i.e. ideally, DOT_OR_USCORE should be set to "."
  #
  #-----------------------------------------------------------------------
  #
  DOT_OR_USCORE: "_"
  #
  #-----------------------------------------------------------------------
  #
  # Set file names.  Definitions:
  #
  # EXPT_CONFIG_FN:
  # Name of the user-specified configuration file for the forecast experiment.
  #
  # CONSTANTS_FN:
  # Name of the file containing definitions of various mathematical, physical, 
  # and SRW App constants.
  #
  # RGNL_GRID_NML_FN:
  # Name of file containing the namelist settings for the code that generates
  # a "ESGgrid" type of regional grid.
  #
  # FV3_NML_FN: 
  # Name of the forecast model's namelist file. It includes the information in 
  # FV3_NML_BASE_SUITE_FN (i.e., input.nml.FV3),  FV3_NML_YAML_CONFIG_FN (i.e., FV3.input.yml), and the user configuration file (i.e., config.yaml).
  #
  # FV3_NML_BASE_SUITE_FN:
  # Name of Fortran namelist file containing the forecast model's base suite
  # namelist, i.e. the portion of the namelist that is common to all physics
  # suites.
  #
  # FV3_NML_YAML_CONFIG_FN:
  # Name of YAML configuration file containing the forecast model's namelist
  # settings for various physics suites.
  #
  # FV3_NML_BASE_ENS_FN:
  # Name of Fortran namelist file containing the forecast model's base 
  # ensemble namelist, i.e. the the namelist file that is the starting point 
  # from which the namelist files for each of the enesemble members are
  # generated.
  #
  # FV3_EXEC_FN:
  # Name to use for the forecast model executable when it is copied from
  # the directory in which it is created in the build step to the executables
  # directory (EXECDIR; this is set during experiment generation).
  #
  # DATA_TABLE_FN: 
  # Name of the file that contains the data table read in by the forecast model. 
  # 
  # DIAG_TABLE_FN: 
  # Prefix for the name of the file that specifies 
  # the output fields of the forecast model. 
  # 
  # FIELD_TABLE_FN: 
  # Prefix for the name of the file that specifies 
  # the tracers that the forecast model will read in from the IC/LBC files.
  # 
  # DIAG_TABLE_TMPL_FN:
  # Name of a template file that specifies the output fields of the
  # forecast model (ufs-weather-model: diag_table) followed by the name
  # of the ccpp_phys_suite.  Its default value is the name of the file
  # that the ufs weather model 
  # expects to read in.
  #
  # FIELD_TABLE_TMPL_FN:
  # Name of a template file that specifies the tracers in IC/LBC files of the 
  # forecast model (ufs-weather-mode: field_table) followed by [dot_ccpp_phys_suite]. 
  # Its default value is the name of the file that the ufs weather model expects 
  # to read in.
  #
  # MODEL_CONFIG_FN:
  # Name of a template file that contains settings and configurations for the 
  # NUOPC/ESMF main component (ufs-weather-model: model_config). Its default 
  # value is the name of the file that the ufs weather model expects to read in.
  #
  # UFS_CONFIG_FN:
  # Name of a template file that contains information about the various UFS 
  # components and their run sequence (ufs-weather-model: ufs.configure). 
  # Its default value is the name of the file that the ufs weather model expects 
  # to read in.
  #
  # AQM_RC_FN: 
  # Name of resource file for NOAA Air Quality Model (AQM). 
  # 
  # AQM_RC_TMPL_FN:
  # Template file name of resource file for NOAA Air Quality Model (AQM)
  #  
  #-----------------------------------------------------------------------
  #
  EXPT_CONFIG_FN: "config.yaml"
  CONSTANTS_FN: "constants.yaml"
  
  RGNL_GRID_NML_FN: "regional_grid.nml"
  
  FV3_NML_FN: "input.nml"
  FV3_NML_BASE_SUITE_FN: "{{ FV3_NML_FN }}.FV3"
  FV3_NML_YAML_CONFIG_FN: "FV3.input.yml"
  FV3_NML_BASE_ENS_FN: "{{ FV3_NML_FN }}.base_ens"
  FV3_EXEC_FN: "ufs_model"

  DATA_TABLE_FN: "data_table"
  DIAG_TABLE_FN: "diag_table"
  FIELD_TABLE_FN: "field_table"
  DIAG_TABLE_TMPL_FN: 'diag_table.{{ CCPP_PHYS_SUITE }}'
  FIELD_TABLE_TMPL_FN: 'field_table.{{ CCPP_PHYS_SUITE }}'
  MODEL_CONFIG_FN: "model_configure"
  UFS_CONFIG_FN: "ufs.configure"
  AQM_RC_FN: "aqm.rc"
  AQM_RC_TMPL_FN: "aqm.rc"

  # 
  #-----------------------------------------------------------------------
  # FV3_NML_BASE_SUITE_FP: 
  # Path to the FV3_NML_BASE_SUITE_FN file. 
  # 
  # FV3_NML_YAML_CONFIG_FP: 
  # Path to the FV3_NML_YAML_CONFIG_FN file.
  # 
  # FV3_NML_BASE_ENS_FP: 
  # Path to the FV3_NML_BASE_ENS_FN file. 
  # 
  # DATA_TABLE_TMPL_FP: 
  # Path to the DATA_TABLE_FN file. 
  # 
  # DIAG_TABLE_TMPL_FP: 
  # Path to the DIAG_TABLE_TMPL_FN file. 
  # 
  # FIELD_TABLE_TMPL_FP: 
  # Path to the FIELD_TABLE_TMPL_FN file. 
  # 
  # MODEL_CONFIG_TMPL_FP: 
  # Path to the MODEL_CONFIG_FN file.
  # 
  # UFS_CONFIG_TMPL_FP: 
  # Path to the UFS_CONFIG_FN file. 
  # 
  # AQM_RC_TMPL_FP: 
  # Path to the AQM_RC_TMPL_FN file. 
  #  
  #-----------------------------------------------------------------------
  #

  FV3_NML_BASE_SUITE_FP: '{{ [user.PARMdir, FV3_NML_BASE_SUITE_FN]|path_join }}'
  FV3_NML_YAML_CONFIG_FP: '{{ [user.PARMdir, FV3_NML_YAML_CONFIG_FN]|path_join }}'
  FV3_NML_BASE_ENS_FP: '{{ [EXPTDIR, FV3_NML_BASE_ENS_FN]|path_join }}'
  DATA_TABLE_TMPL_FP: '{{ [user.PARMdir, DATA_TABLE_FN]|path_join }}'
  DIAG_TABLE_TMPL_FP: '{{ [user.PARMdir, DIAG_TABLE_TMPL_FN]|path_join }}'
  FIELD_TABLE_TMPL_FP: '{{ [user.PARMdir, FIELD_TABLE_TMPL_FN]|path_join }}'
  MODEL_CONFIG_TMPL_FP: '{{ [user.PARMdir, MODEL_CONFIG_FN]|path_join }}'
  UFS_CONFIG_TMPL_FP: '{{ [user.PARMdir, UFS_CONFIG_FN]|path_join }}'
  AQM_RC_TMPL_FP: '{{ [user.PARMdir, AQM_RC_TMPL_FN]|path_join }}'

  # 
  #-----------------------------------------------------------------------
  # These are staged in the exptdir at configuration time
  # 
  # DATA_TABLE_FP: 
  # Path to the data table in the experiment directory. 
  # 
  # FIELD_TABLE_FP: 
  # Path to the field table in the experiment directory. 
  # 
  # UFS_CONFIG_FP: 
  # Path to the UFS_CONFIG_FN file in the experiment directory. 
  # 
  # FV3_NML_FP: 
  # Path to the FV3_NML_FN file in the experiment directory.
  # 
  # FCST_MODEL:
  # Name of forecast model (default=ufs-weather-model)
  #
  # WFLOW_XML_FN:
  # Name of the rocoto workflow XML file that the experiment generation
  # script creates and that defines the workflow for the experiment.
  #
  # GLOBAL_VAR_DEFNS_FN:
  # Name of the experiment configuration file. It contains the primary
  # experiment variables defined in this default configuration script and in the
  # user-specified configuration as well as secondary experiment variables
  # generated by the experiment generation script. This file is the primary
  # source of information used in the scripts at run time.
  #
  # ROCOTO_YAML_FN:
  # Name of the YAML file containing the YAML workflow definition from
  # which the Rocoto XML file is created.
  #
  # EXTRN_MDL_VAR_DEFNS_FN:
  # Name of file (a shell script) containing the defintions of variables
  # associated with the external model from which ICs or LBCs are generated.  This
  # file is created by the get_extrn_* task because the values of the variables
  # it contains are not known before this task runs.  The file is then sourced by
  # the make_ics and make_lbcs tasks.
  #
  # WFLOW_LAUNCH_SCRIPT_FN:
  # Name of the script that can be used to (re)launch the experiment's rocoto
  # workflow.
  #
  # WFLOW_LAUNCH_LOG_FN:
  # Name of the log file that contains the output from successive calls to
  # the workflow launch script (WFLOW_LAUNCH_SCRIPT_FN).
  #
  # GLOBAL_VAR_DEFNS_FP: 
  # Path to the global varibale definition file 
  # (GLOBAL_VAR_DEFNS_FN) in the experiment directory. 
  #
  # ROCOTO_YAML_FP: 
  # Path to the Rocoto YAML configuration file 
  # (ROCOTO_YAML_FN) in the experiment directory. 
  #
  # WFLOW_LAUNCH_SCRIPT_FP: 
  # Path to the workflow launch script 
  # (WFLOW_LAUNCH_SCRIPT_FN) in the experiment directory. 
  #
  # WFLOW_LAUNCH_LOG_FP: 
  # Path to the log file (WFLOW_LAUNCH_LOG_FN) in 
  # the experiment directory that contains output from successive 
  # calls to the workflow launch script. 
  # 
  #-----------------------------------------------------------------------
  #
  DATA_TABLE_FP: '{{ [EXPTDIR, DATA_TABLE_FN]|path_join }}'
  FIELD_TABLE_FP: '{{ [EXPTDIR, FIELD_TABLE_FN]|path_join }}'
  UFS_CONFIG_FP: '{{ [EXPTDIR, UFS_CONFIG_FN]|path_join }}'
  FV3_NML_FP: '{{ [EXPTDIR, FV3_NML_FN]|path_join }}'
  FV3_NML_STOCH_FP: '{{ [EXPTDIR, [FV3_NML_FN, "_stoch"]|join ]|path_join }}'

  FCST_MODEL: "ufs-weather-model"
  WFLOW_XML_FN: "FV3LAM_wflow.xml"
  GLOBAL_VAR_DEFNS_FN: "var_defns.yaml"
  ROCOTO_YAML_FN: "rocoto_defns.yaml"
  EXTRN_MDL_VAR_DEFNS_FN: "extrn_mdl_var_defns"
  WFLOW_LAUNCH_SCRIPT_FN: "launch_FV3LAM_wflow.sh"
  WFLOW_LAUNCH_LOG_FN: "log.launch_FV3LAM_wflow"

  GLOBAL_VAR_DEFNS_FP: '{{ [EXPTDIR, GLOBAL_VAR_DEFNS_FN] |path_join }}'
  ROCOTO_YAML_FP: '{{ [EXPTDIR, ROCOTO_YAML_FN] |path_join }}'
  WFLOW_LAUNCH_SCRIPT_FP: '{{ [user.USHdir, WFLOW_LAUNCH_SCRIPT_FN] |path_join }}'
  WFLOW_LAUNCH_LOG_FP: '{{ [EXPTDIR, WFLOW_LAUNCH_LOG_FN] |path_join }}'
  #
  #-----------------------------------------------------------------------
  #
  # Set the fix file paths
  #
  # FIXdir:
  # Location where fix files will be stored for a given experiment
  #
  # FIXam:
  # Directory containing the fixed files (or symlinks) for various fields on
  # global grids (which are usually much coarser than the native FV3-LAM grid).
  #
  # FIXclim:
  # Directory containing the MERRA2 aerosol climatology data file and
  # lookup tables for optics properties
  #
  # FIXlam:
  # Directory containing the fixed files (or symlinks) for the grid,
  # orography, and surface climatology on the native FV3-LAM grid.
  #
  # THOMPSON_MP_CLIMO_FN and _FP:
  # Name and path of file that contains aerosol climatology data. It can
  # be used to generate approximate versions of the aerosol fields
  # needed by Thompson microphysics.  This file will be used to
  # generate such approximate aerosol fields in the ICs and LBCs if
  # Thompson MP is included in the physics suite and if the external
  # model for ICs or LBCs does not already provide these fields.
  #
  #-----------------------------------------------------------------------
  #
  FIXdir: '{{ EXPTDIR }}'
  FIXam: '{{ [FIXdir, "fix_am"]|path_join }}'
  FIXclim: '{{ [FIXdir, "fix_clim"]|path_join }}'
  FIXlam: '{{ [FIXdir, "fix_lam"]|path_join }}'

  THOMPSON_MP_CLIMO_FN: "Thompson_MP_MONTHLY_CLIMO.nc"
  THOMPSON_MP_CLIMO_FP: '{{ [FIXam, THOMPSON_MP_CLIMO_FN]|path_join }}'
  #
  #-----------------------------------------------------------------------
  #
  # Set CCPP-associated parameters.  Definitions:
  #
  # CCPP_PHYS_SUITE:
  # The physics suite that will run using CCPP (Common Community Physics
  # Package).  The choice of physics suite determines the forecast model's 
  # namelist file, the diagnostics table file, the field table file, and 
  # the XML physics suite definition file that are staged in the experiment 
  # directory or the cycle directories under it.
  #
  # *_FN and *_FP variables set the name and paths to the suite
  # definition files used for the experiment
  # 
  # CCPP_PHYS_SUITE_FN: The name of the suite definition file (SDF) 
  # used for the experiment. 
  # 
  # CCPP_PHYS_SUITE_IN_CCPP_FP: The full path to the suite definition 
  # file (SDF) in the forecast model's directory structure (e.g., 
  # /path/to/ufs-srweather-app/sorc/ufs-weather-model/FV3/ccpp/suites/$CCPP_PHYS_SUITE_FN) 
  #
  # CCPP_PHYS_SUITE_FP: The full path to the suite definition file 
  # (SDF) in the experiment directory. 
  # 
  # CCPP_PHYS_DIR:
  # The directory containing the CCPP physics source code. This path is needed to
  # be able to use table(s) contained in that repository.
  #-----------------------------------------------------------------------
  #
  CCPP_PHYS_SUITE: "FV3_GFS_v16"
  CCPP_PHYS_SUITE_FN: 'suite_{{ CCPP_PHYS_SUITE }}.xml'
  CCPP_PHYS_SUITE_IN_CCPP_FP: '{{ [user.UFS_WTHR_MDL_DIR, "FV3", "ccpp", "suites", CCPP_PHYS_SUITE_FN] |path_join }}'
  CCPP_PHYS_SUITE_FP: '{{ [workflow.EXPTDIR, CCPP_PHYS_SUITE_FN]|path_join }}'
  CCPP_PHYS_DIR: '{{ [user.UFS_WTHR_MDL_DIR, "FV3", "ccpp", "physics", "physics", "SFC_Models", "Land", "Noahmp"] |path_join }}'
  #
  #-----------------------------------------------------------------------
  #
  # Set the field dictionary file name and paths.
  #
  # FIELD_DICT_FN: 
  # The name of the field dictionary file. This file is a community-based 
  # dictionary for shared coupling fields and is automatically generated 
  # by the NUOPC Layer. 
  #
  # FIELD_DICT_IN_UWM_FP: 
  # The full path to FIELD_DICT_FN within the forecast model's directory structure 
  # (e.g., /path/to/ufs-srweather-app/sorc/ufs-weather-model/tests/parm/$FIELD_DICT_FN).
  #
  # FIELD_DICT_FP: 
  # The full path to FIELD_DICT_FN in the experiment directory.
  #
  #-----------------------------------------------------------------------
  #
  FIELD_DICT_FN: "fd_ufs.yaml"
  FIELD_DICT_IN_UWM_FP: '{{ [user.UFS_WTHR_MDL_DIR, "tests", "parm", FIELD_DICT_FN]|path_join }}'
  FIELD_DICT_FP: '{{ [workflow.EXPTDIR, FIELD_DICT_FN]|path_join }}'
  #
  #-----------------------------------------------------------------------
  #
  # Set GRID_GEN_METHOD. This variable specifies the method to use to 
  # generate a regional grid in the horizontal. The values that it can 
  # take on are:
  #
  # * "ESGgrid":
  #   This will generate a regional grid using the map projection developed
  #   by Jim Purser of EMC.
  #
  # * "GFDLgrid":
  #   The "GFDLgrid" method first generates a "parent" global cubed-sphere grid. a 
  #   Then a portion from tile 6 of the global grid is used as the regional grid. 
  #   This regional grid is referred to in the grid generation scripts 
  #   as "tile 7," even though it does not correspond to a complete tile.
  #   The forecast is run only on the regional grid (i.e., on tile 7, not on tiles 1 through 6). 
  #
  # Note that:
  #
  # 1) If the experiment uses a predefined grid (i.e. if 
  #    PREDEF_GRID_NAME is set to the name of a valid predefined 
  #    grid), then GRID_GEN_METHOD will be reset to the value of 
  #    GRID_GEN_METHOD for that grid.  This will happen regardless of 
  #    whether GRID_GEN_METHOD is assigned a value in the user-
  #    specified experiment configuration file. In other words, any value 
  #    assigned in the experiment configuration file will be overwritten.
  #
  # 2) If the experiment is not using one of the predefined grids (i.e. if 
  #    PREDEF_GRID_NAME is set to a null string), then GRID_GEN_METHOD must 
  #    be set in the experiment configuration file.  Otherwise, 
  #    the experiment generation will fail because the generation 
  #    scripts check to ensure that the grid name is set to a non-empty 
  #    string before creating the experiment directory.
  #
  #-----------------------------------------------------------------------
  #
  GRID_GEN_METHOD: ""
  #
  #-----------------------------------------------------------------------
  #
  # Set PREDEF_GRID_NAME. This parameter indicates which (if any) 
  # predefined regional grid to use for the experiment. 
  #
  # Setting PREDEF_GRID_NAME provides a convenient method of specifying a
  # commonly used set of grid-dependent parameters.  The predefined grid 
  # parameters are specified in the script 
  #
  #   $HOMEdir/ush/set_predef_grid_params.py
  #
  # * If PREDEF_GRID_NAME is set to a valid predefined grid name, the grid 
  #   generation method GRID_GEN_METHOD, the (native) grid parameters, and 
  #   the write-component grid parameters are set to predefined values for 
  #   the specified grid, overwriting any settings of these parameters in 
  #   the user-specified experiment configuration file.  In addition, if 
  #   the time step DT_ATMOS and the computational parameters LAYOUT_X, 
  #   LAYOUT_Y, and BLOCKSIZE are not specified in that configuration file, 
  #   they are also set to predefined values for the specified grid.
  #
  # * If PREDEF_GRID_NAME is set to an empty string, it implies the user
  #   will provide the native grid parameters in the user-specified 
  #   experiment configuration file (EXPT_CONFIG_FN). In this case, the 
  #   grid generation method GRID_GEN_METHOD, the native grid parameters, 
  #   the write-component grid parameters, the forecast model's 
  # main time step DT_ATMOS, and the computational 
  #   parameters (LAYOUT_X, LAYOUT_Y, and BLOCKSIZE) must be set in that 
  #   configuration file; otherwise, the values of all of these parameters 
  #   in this default experiment configuration file will be used.
  #
  #-----------------------------------------------------------------------
  #
  PREDEF_GRID_NAME: ""
  #
  #-----------------------------------------------------------------------
  #
  # Set forecast parameters.  Definitions:
  #
  # DATE_FIRST_CYCL:
  # Starting cycle date of the FIRST forecast in the set of forecasts to
  # run.  Format is "YYYYMMDDHH". Note: This has recently changed to
  # include the first cycle hour.
  #
  # DATE_LAST_CYCL:
  # Starting cycle date of the LAST forecast in the set of forecasts to run.
  # Format is "YYYYMMDDHH".  Note: This has recently changed to include
  # the last cycle hour.
  #
  # INCR_CYCL_FREQ:
  # Increment in hours for Rocoto cycle frequency.
  # Default is 24, which means cycle_freq=24:00:00
  #
  # FCST_LEN_HRS:
  # The length of each forecast, in integer hours. The short forecast
  # length when there are different lengths.
  #
  # LONG_FCST_LEN_HRS:
  # The length of the longer forecast in integer hours in a system that
  # varies the length of the forecast by time of day. There is no need for the user to update this value
  # directly, as it is derived from FCST_LEN_CYCL when FCST_LEN_HRS=-1
  #
  # FCST_LEN_CYCL:
  # The length of forecast for each cycle date in integer hours.
  # This is valid only when FCST_LEN_HRS = -1.
  # This pattern recurs for all cycle dates.
  # Must have the same number of entries as cycles per day, or if less
  # than one day the entries must include the length of each cycle to be
  # run. By default, it is set to a 1-item list containing the standard
  # fcst length.
  #
  #-----------------------------------------------------------------------
  #
  DATE_FIRST_CYCL: "YYYYMMDDHH"
  DATE_LAST_CYCL: "YYYYMMDDHH"
  INCR_CYCL_FREQ: 24
  FCST_LEN_HRS: 24
  FCST_LEN_CYCL:
    - '{{ FCST_LEN_HRS }}'
  LONG_FCST_LEN: '{% if FCST_LEN_HRS < 0 %}{{ FCST_LEN_CYCL|max }}{% else %}{{ FCST_LEN_HRS }}{% endif %}'
  #
  #-----------------------------------------------------------------------
  #
  # Set PREEXISTING_DIR_METHOD.  This variable determines how
  # to deal with preexisting directories [e.g., ones generated by previous
  # calls to the experiment generation script using the same experiment name
  # (EXPT_SUBDIR) as the current experiment].  This variable must be set to
  # "delete", "reuse", "rename", or "quit". The resulting behavior for each
  # of these values is as follows:
  #
  # * "delete":
  #   The preexisting directory is deleted and a new directory (having the
  #   same name as the original preexisting directory) is created.
  #
  # * "rename":
  #   The preexisting directory is renamed and a new directory (having the
  #   same name as the original preexisting directory) is created. The new
  #   name of the preexisting directory consists of its original name and
  #   the suffix "_oldNNN", where NNN is a 3-digit integer chosen to make
  #   the new name unique.
  #
  # * "reuse":
  #    This method will keep preexisting directory intact except that
  #     when preexisting directory is $EXPDIR, do the following:
  #       save all old files to a subdirectory oldxxx/ and then
  #       populate new files into the $EXPDIR directory
  #    This is useful to keep ongoing runs uninterrupted:
  #     rocotoco *db files and previous cycles will stay and hence
  #       1. no need to manually cp/mv *db files and previous cycles back
  #       2. no need to manually restart related rocoto tasks failed during
  #            the workflow generation process
  #    This may be best suited for incremental system reuses.
  #
  # * "quit":
  #   The preexisting directory is left unchanged, but execution of the
  #   currently running script is terminated.  In this case, the preexisting
  #   directory must be dealt with manually before rerunning the script.
  #
  #-----------------------------------------------------------------------
  #
  PREEXISTING_DIR_METHOD: "quit"
  #
  #-----------------------------------------------------------------------
  #
  # Set flags for more detailed messages.  Definitions:
  #
  # VERBOSE:
  # This is a flag that determines whether or not the experiment generation 
  # and workflow task scripts print out more informational messages.
  #
  # DEBUG:
  # This is a flag that determines whether to print out very detailed debugging messages.
  # Note that if DEBUG is set to TRUE, then
  # VERBOSE will also be reset to TRUE if it isn't already.
  #
  #-----------------------------------------------------------------------
  #
  VERBOSE: true
  DEBUG: false
  #
  #-----------------------------------------------------------------------
  #
  # COMPILER:
  # Type of compiler invoked during the build step. Currently, this must 
  # be set manually; it is not inherited from the build system in the 
  # ufs-srweather-app directory.
  #
  # SYMLINK_FIX_FILES:
  # Symlink fix files to experiment directory if true; otherwise copy the files.
  #
  #------------------------------------------------------------------------
  #
  COMPILER: "intel"
  SYMLINK_FIX_FILES: true
  #
  #-----------------------------------------------------------------------
  #
  # DO_REAL_TIME:
  # Switch for real-time run
  #
  #-----------------------------------------------------------------------
  #
  DO_REAL_TIME: false
  #
  #-----------------------------------------------------------------------
  #
  # COLDSTART:
  # Flag turning on/off cold start for the first cycle
  #
  # WARMSTART_CYCLE_DIR:
  # Path to the cycle directory where RESTART subdirectory is located for warm start
  #
  #-----------------------------------------------------------------------
  #
  COLDSTART: true
  WARMSTART_CYCLE_DIR: "/path/to/warm/start/cycle/dir"

#----------------------------
# NCO specific variables
#-----------------------------
nco:
  #
  #-----------------------------------------------------------------------
  #
  # Set variables that are only used in NCO mode (i.e. when RUN_ENVIR is 
  # set to "nco"). All variables have the suffix [_default] meaning the default value.
  # This is because they are supposed to be defined in job cards for the 
  # production using ecFlow.
  #
  # Definitions: 
  #
  # envir_default, NET_default, model_ver_default, RUN_default:
  # Standard environment variables defined in the NCEP Central Operations WCOSS
  # Implementation Standards document as follows:
  #
  #   envir_default:
  #   Set to "test" during the initial testing phase, "para" when running
  #   in parallel (on a schedule), and "prod" in production.
  #
  #   NET_default:
  #   Model name (first level of com directory structure)
  #
  #   model_ver_default:
  #   Version number of package in three digits (second level of com directory)
  #
  #   RUN_default:
  #   Name of model run (third level of com directory structure).
  #   In general, same as ${NET_default}.
  #
  # PTMP:
  # User-defined path to the com type directories (OPSROOT=$PTMP/$envir).
  #
  # DBNROOT_default: 
  # Root directory for the data-alerting utilities.
  #
  # SENDECF_default: 
  # Boolean variable used to control ecflow_client child commands.
  #
  # SENDDBN_default: 
  # Boolean variable used to control sending products off WCOSS2.
  #
  # SENDDBN_NTC_default: 
  # Boolean variable used to control sending products with WMO 
  # headers off WCOSS2.
  #
  # SENDCOM_default: 
  # Boolean variable to control data copies to $COMOUT.
  #
  # SENDWEB_default: 
  # Boolean variable used to control sending products to a web server, 
  # often ncorzdm.
  #
  # KEEPDATA_default: 
  # Boolean variable used to specify whether or not the working 
  # directory should be kept upon successful job completion.
  #
  # MAILTO_default: 
  # List of email addresses to send email to.
  #
  # MAILCC_default: 
  # List of email addresses to CC on email.
  #
  #-----------------------------------------------------------------------
  #
  envir_default: "test"
  NET_default: "srw"
  RUN_default: "srw"
  model_ver_default: "v1.0.0"

  PTMP: '{{ workflow.EXPT_BASEDIR }}/../nco_dirs' 

  DBNROOT_default: ""
  SENDECF_default: "NO"
  SENDDBN_default: "NO"
  SENDDBN_NTC_default: "NO"
  SENDCOM_default: "YES"
  SENDWEB_default: "NO"
  KEEPDATA_default: "YES"
  MAILTO_default: ""
  MAILCC_default: ""

#----------------------------
# MAKE GRID config parameters
#-----------------------------
task_make_grid:
  #
  #-----------------------------------------------------------------------
  #
  # GRID_DIR:
  # The directory containing pregenerated grid files when the
  # make_grid task is not set to run.
  # 
  #-----------------------------------------------------------------------
  # 
  GRID_DIR: '{{ [workflow.EXPTDIR, "grid"]|path_join if rocoto.tasks.get("task_make_grid") else "" }}'
  #
  #-----------------------------------------------------------------------
  #
  # Set parameters specific to the "ESGgrid" method of generating a regional
  # grid (i.e. for GRID_GEN_METHOD set to "ESGgrid"). Definitions:
  #
  # ESGgrid_LON_CTR:
  # The longitude of the center of the grid (in degrees).
  #
  # ESGgrid_LAT_CTR:
  # The latitude of the center of the grid (in degrees).
  #
  # ESGgrid_DELX:
  # The cell size in the zonal direction of the regional grid (in meters).
  #
  # ESGgrid_DELY:
  # The cell size in the meridional direction of the regional grid (in 
  # meters).
  #
  # ESGgrid_NX:
  # The number of cells in the zonal direction on the regional grid.
  #
  # ESGgrid_NY:
  # The number of cells in the meridional direction on the regional grid.
  #
  # ESGgrid_WIDE_HALO_WIDTH:
  # The width (in units of number of grid cells) of the halo to add around
  # the regional grid before shaving the halo down to the width(s) expected
  # by the forecast model.  
  #
  # The forecast model requires grid files containing 3-cell- and 
  # 4-cell-wide halos and orography files with 0-cell- and 3-cell-wide halos.
  # In order to generate grid and orography files with appropriately-sized halos, 
  # the grid and orography tasks create preliminary files with halos around the regional domain
  # of width ESGgrid_WIDE_HALO_WIDTH cells. 
  # The files are then read in and "shaved" down to obtain grid
  # files with 3-cell-wide and 4-cell-wide halos and orography files with
  # 0-cell-wide (i.e. no halo) and 3-cell-wide halos.  The original halo that
  #  gets shaved down is referred to as the "wide" halo because it is wider than the 0-cell-wide,  
  # 3-cell-wide, and 4-cell-wide halos that users eventually end up with.
  # Note that the grid and orography files with the wide halo are only needed as intermediates
  # in generating the files with 0-cell-, 3-cell-, and 4-cell-wide halos;
  # they are not needed by the forecast model.  
  # NOTE: Probably don't need to make ESGgrid_WIDE_HALO_WIDTH a user-specified 
  #       variable.  Just set it in the function set_gridparams_ESGgrid.py.
  #
  # ESGgrid_PAZI:
  # The rotational parameter for the ESG grid (in degrees).
  #
  #-----------------------------------------------------------------------
  #
  ESGgrid_LON_CTR: ""
  ESGgrid_LAT_CTR: ""
  ESGgrid_DELX: ""
  ESGgrid_DELY: ""
  ESGgrid_NX: ""
  ESGgrid_NY: ""
  ESGgrid_WIDE_HALO_WIDTH: ""
  ESGgrid_PAZI: ""

  #-----------------------------------------------------------------------
  #
  # Set parameters specific to the "GFDLgrid" method of generating a regional
  # grid (i.e. for GRID_GEN_METHOD set to "GFDLgrid").  The following 
  # parameters will be used only if GRID_GEN_METHOD is set to "GFDLgrid". 
  #
  # In this grid generation method:
  #
  # * The regional grid is defined with respect to a "parent" global cubed-
  #   sphere grid. Thus, all the parameters for a global cubed-sphere grid
  #   must be specified even though the model equations are integrated 
  #   only on the regional grid).
  # Tile 6 has arbitrarily been chosen as the tile to use to orient the
  #   global parent grid on the sphere (Earth). 
  # For convenience, the regional grid is denoted as "tile 7" even though it
  # is embedded within tile 6 (i.e., it doesn't extend
  #   beyond the boundary of tile 6). Its exact location within tile 6 is
  #   is determined by specifying the starting and ending i and j indices
  #   of the regional grid on tile 6, where i is the grid index in the x
  #   direction and j is the grid index in the y direction.  
  # All of this information is set in the variables below.
  #
  # Definitions of parameters that need to be specified when GRID_GEN_METHOD
  # is set to "GFDLgrid":
  #
  # GFDLgrid_LON_T6_CTR:
  # Longitude of the center of tile 6 (in degrees).
  #
  # GFDLgrid_LAT_T6_CTR:
  # Latitude of the center of tile 6 (in degrees).
  #
  # GFDLgrid_NUM_CELLS: The number of grid cells in either one of the two 
  # horizontal directions x and y on any one of the 6 tiles of the parent
  # global cubed-sphere grid.
  # The mapping from GFDLgrid_NUM_CELLS to a nominal
  #   resolution (grid cell size) for a uniform global grid (i.e., a grid with Schmidt
  #   stretch factor GFDLgrid_STRETCH_FAC set to 1) for several values of
  #   GFDLgrid_NUM_CELLS is as follows:
  #
  #     GFDLgrid_NUM_CELLS      typical cell size
  #     ------------      -----------------
  #               48                 200 km
  #               96                 100 km
  #              192                  50 km
  #              384                  25 km
  #              768                  13 km
  #             1152                 8.5 km
  #             3072                 3.2 km
  #
  # * Note that these are only typical cell sizes.  The actual cell size on
  #   the global grid tiles varies somewhat as we move across a tile and is dependent
  # on both GFDLgrid_NUM_CELLS and on GFDLgrid_STRETCH_FAC, which 
  # modifies the shape and size of the tile.
  #
  # * Note that the name of this parameter
  #   is really a misnomer because although it has the string "RES" (for 
  #   "resolution") in its name, it specifies number of grid cells, not grid
  #   size (e.g., in meters or kilometers). However, we keep this name in order
  #   to remain consistent with the usage of the word "resolution" in the 
  #   global forecast model and other auxiliary code.
  #
  # GFDLgrid_STRETCH_FAC: 
  # Stretching factor used in the Schmidt transformation 
  # applied to the parent cubed-sphere grid. 
  # Setting the Schmidt stretching factor GFDLgrid_STRETCH_FAC to a value
  # greater than 1 shrinks tile 6, while setting it to a value less than 
  # 1 (but still greater than 0) expands it.  The remaining 5 tiles change
  #   shape as necessary to maintain global coverage of the grid.
  #
  # * GFDLgrid_REFINE_RATIO is the refinement ratio of the regional grid 
  #   (tile 7) with respect to the grid on its parent tile (tile 6), i.e.,
  #   it is the number of grid cells along the boundary of the regional grid
  #   that abut one cell on tile 6.  Thus, the cell size on the regional 
  #   grid depends not only on GFDLgrid_NUM_CELLS and GFDLgrid_STRETCH_FAC (because
  #   the cell size on tile 6 depends on these two parameters) but also on 
  #   GFDLgrid_REFINE_RATIO.  Note that as on the tiles of the global grid, 
  #   the cell size on the regional grid is not uniform but varies as we move across the grid.
  #
  # 
  # GFDLgrid_ISTART_OF_RGNL_DOM_ON_T6G:
  # i-index on tile 6 at which the regional grid (tile 7) starts.
  #
  # GFDLgrid_IEND_OF_RGNL_DOM_ON_T6G:
  # i-index on tile 6 at which the regional grid (tile 7) ends.
  #
  # GFDLgrid_JSTART_OF_RGNL_DOM_ON_T6G:
  # j-index on tile 6 at which the regional grid (tile 7) starts.
  #
  # GFDLgrid_JEND_OF_RGNL_DOM_ON_T6G:
  # j-index on tile 6 at which the regional grid (tile 7) ends.
  #
  # GFDLgrid_USE_NUM_CELLS_IN_FILENAMES:
  # Flag that determines the file naming convention to use for grid, orography,
  # and surface climatology files (or, if using pregenerated files, the
  # naming convention that was used to name these files).  These files 
  # usually start with the string "C${RES}_", where RES is an integer.
  # In the global forecast model, RES is the number of points in each of
  # the two horizontal directions (x and y) on each tile of the global grid
  # (defined here as GFDLgrid_NUM_CELLS).  If this flag is set to true, RES will
  # be set to GFDLgrid_NUM_CELLS just as in the global forecast model.  If it is
  # set to false, we calculate (in the grid generation task) an "equivalent
  # global uniform cubed-sphere resolution" -- call it RES_EQUIV -- and 
  # then set RES equal to it.  RES_EQUIV is the number of grid points in 
  # each of the x and y directions on each tile that a global UNIFORM (i.e., 
  # stretch factor of 1) cubed-sphere grid would have to have in order to
  # have the same average grid size as the regional grid.  This is a more
  # useful indicator of the grid size because it takes into account the 
  # effects of GFDLgrid_NUM_CELLS, GFDLgrid_STRETCH_FAC, and GFDLgrid_REFINE_RATIO
  # in determining the regional grid's typical grid size, whereas simply
  # setting RES to GFDLgrid_NUM_CELLS doesn't take into account the effects of
  # GFDLgrid_STRETCH_FAC and GFDLgrid_REFINE_RATIO on the regional grid's
  # resolution.  Nevertheless, some users still prefer to use GFDLgrid_NUM_CELLS
  # in the file names, so we allow for that here by setting this flag to
  # true.
  #
  #-----------------------------------------------------------------------
  #
  GFDLgrid_LON_T6_CTR: ""
  GFDLgrid_LAT_T6_CTR: ""
  GFDLgrid_NUM_CELLS: ""
  GFDLgrid_STRETCH_FAC: ""
  GFDLgrid_REFINE_RATIO: ""
  GFDLgrid_ISTART_OF_RGNL_DOM_ON_T6G: ""
  GFDLgrid_IEND_OF_RGNL_DOM_ON_T6G: ""
  GFDLgrid_JSTART_OF_RGNL_DOM_ON_T6G: ""
  GFDLgrid_JEND_OF_RGNL_DOM_ON_T6G: ""
  GFDLgrid_USE_NUM_CELLS_IN_FILENAMES: ""
  #
#----------------------------
# MAKE OROG config parameters
#-----------------------------
#-----------------------------------------------------------------------
# KMP_AFFINITY_MAKE_OROG: 
# Intel Thread Affinity Interface for the make_orog task. 
# Settings for this task are disabled because this task does not use 
# parallelized code.
#
# OMP_NUM_THREADS_MAKE_OROG: 
# The number of OpenMP threads to use for parallel regions.
#
# OMP_STACKSIZE_MAKE_OROG: 
# Controls the size of the stack for threads created by the OpenMP 
# implementation.
#
# OROG_DIR: 
# The directory containing pre-generated orography files to use when 
# the MAKE_OROG task is not meant to run.
#-----------------------------------------------------------------------
task_make_orog:
  KMP_AFFINITY_MAKE_OROG: "disabled"
  OMP_NUM_THREADS_MAKE_OROG: 6
  OMP_STACKSIZE_MAKE_OROG: "2048m"
  OROG_DIR: '{{ [workflow.EXPTDIR, "orog"]|path_join if rocoto.tasks.get("task_make_orog") else "" }}'

#----------------------------
# MAKE SFC CLIMO config parameters
#-----------------------------
#-----------------------------------------------------------------------
# KMP_AFFINITY_MAKE_SFC_CLIMO: 
# Intel Thread Affinity Interface for the make_sfc_climo task. 
#
# OMP_NUM_THREADS_MAKE_SFC_CLIMO: 
# The number of OpenMP threads to use for parallel regions.
#
# OMP_STACKSIZE_MAKE_SFC_CLIMO: 
# Controls the size of the stack for threads created by the OpenMP 
# implementation.
#
# SFC_CLIMO_DIR: 
# The directory containing pre-generated surface climatology files 
# to use when the MAKE_SFC_CLIMO task is not meant to run.
#-----------------------------------------------------------------------
task_make_sfc_climo:
  KMP_AFFINITY_MAKE_SFC_CLIMO: "scatter"
  OMP_NUM_THREADS_MAKE_SFC_CLIMO: 1
  OMP_STACKSIZE_MAKE_SFC_CLIMO: "1024m"
  SFC_CLIMO_DIR: '{{ [workflow.EXPTDIR, "sfc_climo"]|path_join if rocoto.tasks.get("task_make_sfc_climo") else "" }}'

#----------------------------
# EXTRN ICS config parameters
#-----------------------------
task_get_extrn_ics:
  #
  #-----------------------------------------------------------------------
  #
  # Set initial and lateral boundary condition generation parameters.  
  # Definitions:
  #
  # EXTRN_MDL_NAME_ICS:
  # The name of the external model that will provide fields from which initial
  # condition files, surface files, and 0-th hour boundary condition files will 
  # be generated for input into the forecast model.
  #
  # EXTRN_MDL_ICS_OFFSET_HRS:
  # Users may wish to start a forecast using forecast data from a previous cycle
  # of an external model. This variable indicates how many hours earlier
  # the external model started than the FV3 forecast configured here.
  # For example, if the forecast should start from a 6-hour
  # forecast of the GFS, then EXTRN_MDL_ICS_OFFSET_HRS: "6".
  #
  # FV3GFS_FILE_FMT_ICS:
  # If using the FV3GFS model as the source of the ICs (i.e., if EXTRN_MDL_NAME_ICS
  # is set to "FV3GFS"), this variable specifies the format of the model
  # files to use when generating the ICs.
  #
  #-----------------------------------------------------------------------
  #
  EXTRN_MDL_NAME_ICS: "FV3GFS"
  EXTRN_MDL_ICS_OFFSET_HRS: 0
  FV3GFS_FILE_FMT_ICS: "nemsio"
  #
  #-----------------------------------------------------------------------
  #
  # Base directories in which to search for external model files.
  #
  # EXTRN_MDL_SYSBASEDIR_ICS:
  # A known location of a real data stream on a given platform. This is typically 
  # a real-time data stream as on Hera, Jet, or WCOSS. External model files 
  # for generating ICs on the native grid should be accessible via this data stream. 
  # The way the full path containing these files is constructed depends on the 
  # user-specified external model for ICs, i.e. EXTRN_MDL_NAME_ICS.
  #
  # Note that this must be defined as a null string here so that if it is 
  # specified by the user in the experiment configuration file, it remains 
  # set to those values, and if not, it gets set to machine-dependent 
  # values.
  #
  #-----------------------------------------------------------------------
  # 
  EXTRN_MDL_SYSBASEDIR_ICS: ''
  #
  #-----------------------------------------------------------------------
  #
  # User-staged external model directories and files.  Definitions:
  #
  # USE_USER_STAGED_EXTRN_FILES:
  # Flag that determines whether or not the workflow will look for the 
  # external model files needed for generating ICs in user-specified
  # directories.
  #
  # EXTRN_MDL_SOURCE_BASEDIR_ICS:
  # Directory in which to look for external model files for generating ICs.
  # If USE_USER_STAGED_EXTRN_FILES is set to true, the workflow looks in 
  # this directory for a subdirectory named "YYYYMMDDHH" consisting of the 
  # starting date and cycle hour of 
  # the forecast, where YYYY is the 4-digit year, MM the 2-digit month, DD 
  # the 2-digit day of the month, and HH the 2-digit hour of the day) for 
  # the external model files specified by the array EXTRN_MDL_FILES_ICS 
  # (these files will be used to generate the ICs on the native FV3-LAM 
  # grid). This variable is not used if USE_USER_STAGED_EXTRN_FILES is 
  # set to false.
  # 
  # EXTRN_MDL_FILES_ICS:
  # Array containing templates of the names of the files to search for in
  # the directory specified by EXTRN_MDL_SOURCE_BASEDIR_ICS.  This
  # variable is not used if USE_USER_STAGED_EXTRN_FILES is set to false.
  # A single template should be used for each model file type that is
  # used. You may use any of the Python-style templates
  # allowed in the ush/retrieve_data.py script. To see the full list of
  # supported templates, run that script with a -h option. For example, to 
  # set FV3GFS nemsio input files, add:
  #   EXTRN_MDL_FILES_ICS=( gfs.t{hh}z.atmf{fcst_hr:03d}.nemsio \
  #   gfs.t{hh}z.sfcf{fcst_hr:03d}.nemsio )
  # Or for FV3GFS grib files:
  #   EXTRN_MDL_FILES_ICS=( gfs.t{hh}z.pgrb2.0p25.f{fcst_hr:03d} )
  #
  #-----------------------------------------------------------------------
  #
  USE_USER_STAGED_EXTRN_FILES: false
  EXTRN_MDL_SOURCE_BASEDIR_ICS: ""
  EXTRN_MDL_FILES_ICS: ""

#----------------------------
# EXTRN LBCS config parameters
#-----------------------------
task_get_extrn_lbcs:
  #
  #-----------------------------------------------------------------------
  #
  # EXTRN_MDL_NAME_LBCS:
  # The name of the external model that will provide fields from which 
  # lateral boundary condition (LBC) files (except for the 0-th hour LBC 
  # file) will be generated for input into the forecast model.
  #
  # LBC_SPEC_INTVL_HRS:
  # The interval (in integer hours) with which LBC files will be generated.
  # We will refer to this as the boundary update interval.  Note that the
  # model specified in EXTRN_MDL_NAME_LBCS must have data available at a
  # frequency greater than or equal to that implied by LBC_SPEC_INTVL_HRS.
  # For example, if LBC_SPEC_INTVL_HRS is set to 6, then the model must have
  # data availble at least every 6 hours. It is up to the user to ensure 
  # that this is the case.
  #
  # EXTRN_MDL_LBCS_OFFSET_HRS:
  # Users may wish to use lateral boundary conditions from a forecast that
  # was started earlier than the initial time for the forecast
  # configured here. This variable indicates how many hours earlier
  # the external model started than the forecast configured here.
  # For example, the forecast should use lateral boundary
  # conditions from a GFS forecast started 6 hours earlier, then
  # EXTRN_MDL_LBCS_OFFSET_HRS: 6. Defaults to 0 except for RAP, which
  # uses a 3 hour offset. The default value is model-dependent and is set 
  # in ush/set_extrn_mdl_params.py.
  #
  # FV3GFS_FILE_FMT_LBCS:
  # If using the FV3GFS model as the source of the LBCs (i.e., if 
  # EXTRN_MDL_NAME_LBCS is set to "FV3GFS"), this variable specifies the 
  # format of the model files to use when generating the LBCs.
  #
  #-----------------------------------------------------------------------
  #
  EXTRN_MDL_NAME_LBCS: "FV3GFS"
  LBC_SPEC_INTVL_HRS: 6
  EXTRN_MDL_LBCS_OFFSET_HRS: '{{ 3 if EXTRN_MDL_NAME_LBCS == "RAP" else 0 }}'
  FV3GFS_FILE_FMT_LBCS: "nemsio"
  #
  #-----------------------------------------------------------------------
  #
  # EXTRN_MDL_SYSBASEDIR_LBCS:
  # Same as EXTRN_MDL_SYSBASEDIR_ICS but for LBCs.
  #
  # Note that this variable must be defined as a null string here so that if it is 
  # specified by the user in the experiment configuration file, it remains 
  # set to those values, and if not, it gets set to machine-dependent 
  # values.
  #
  #-----------------------------------------------------------------------
  #
  EXTRN_MDL_SYSBASEDIR_LBCS: ''
  #
  #-----------------------------------------------------------------------
  #
  # User-staged external model directories and files.  Definitions:
  #
  # USE_USER_STAGED_EXTRN_FILES:
  # Analogous to USE_USER_STAGED_EXTRN_FILES in ICS but for LBCs.
  #
  # EXTRN_MDL_SOURCE_BASEDIR_LBCS:
  # Analogous to EXTRN_MDL_SOURCE_BASEDIR_ICS but for LBCs instead of ICs.
  #
  # EXTRN_MDL_FILES_LBCS:
  # Analogous to EXTRN_MDL_FILES_ICS but for LBCs instead of ICs.
  #
  #-----------------------------------------------------------------------
  #
  USE_USER_STAGED_EXTRN_FILES: false
  EXTRN_MDL_SOURCE_BASEDIR_LBCS: ""
  EXTRN_MDL_FILES_LBCS: ""

#----------------------------
# MAKE ICS config parameters
#-----------------------------
task_make_ics:
  #-----------------------------------------------------------------------
  # KMP_AFFINITY_MAKE_ICS: 
  # Intel Thread Affinity Interface for the make_ics task. 
  #
  # OMP_NUM_THREADS_MAKE_ICS: 
  # The number of OpenMP threads to use for parallel regions.
  #
  # OMP_STACKSIZE_MAKE_ICS: 
  # Controls the size of the stack for threads created by the OpenMP 
  # implementation.
  #-----------------------------------------------------------------------
  KMP_AFFINITY_MAKE_ICS: "scatter"
  OMP_NUM_THREADS_MAKE_ICS: 1
  OMP_STACKSIZE_MAKE_ICS: "1024m"
  #
  #-----------------------------------------------------------------------
  #
  # USE_FVCOM:
  # Flag set to update surface conditions in FV3-LAM with fields generated
  # from the Finite Volume Community Ocean Model (FVCOM). This will
  # replace lake/sea surface temperature, ice surface temperature, and ice
  # placement. This flag will be used in make_ics to modify sfc_data.nc
  # after chgres_cube is run by running the routine process_FVCOM.exe 
  # FVCOM data must already be interpolated to the desired FV3-LAM grid. 
  #
  # FVCOM_WCSTART:
  # Define whether this is a "warm" start or a "cold" start. Setting this to 
  # "warm" will read in the sfc_data.nc file generated in a RESTART directory.
  # Setting this to "cold" will read in the sfc_data.nc file generated from 
  # chgres_cube in the make_ics portion of the workflow.
  #
  # FVCOM_DIR:
  # User defined directory where FVCOM data already interpolated to FV3-LAM
  # grid is located. The file in this directory must be named fvcom.nc
  #
  # FVCOM_FILE:
  # Name of file located in FVCOM_DIR that has FVCOM data interpolated to 
  # FV3-LAM grid. This file will be copied later to a new location and name
  # changed to fvcom.nc
  #
  # VCOORD_FILE:
  # Full path to the file used to set the vertical coordinate in FV3.
  # This file should be the same in both make_ics and make_lbcs.
  #
  #------------------------------------------------------------------------
  #
  USE_FVCOM: false
  FVCOM_WCSTART: "cold"
  FVCOM_DIR: ""
  FVCOM_FILE: "fvcom.nc"
  VCOORD_FILE: "{{ workflow.FIXam }}/global_hyblev.l65.txt"

#----------------------------
# MAKE LBCS config parameters
#-----------------------------
task_make_lbcs:
  #------------------------------------------------------------------------
  #
  # KMP_AFFINITY_MAKE_LBCS: 
  # Intel Thread Affinity Interface for the make_lbcs task. 
  # 
  # OMP_NUM_THREADS_MAKE_LBCS: 
  # The number of OpenMP threads to use for parallel regions.
  # 
  # OMP_STACKSIZE_MAKE_LBCS: 
  # Controls the size of the stack for threads created by the OpenMP implementation.
  #
  # VCOORD_FILE: 
  # Full path to the file used to set the vertical coordinates in FV3. 
  # This file should be the same in both make_ics and make_lbcs.
  #
  #------------------------------------------------------------------------
  KMP_AFFINITY_MAKE_LBCS: "scatter"
  OMP_NUM_THREADS_MAKE_LBCS: 1
  OMP_STACKSIZE_MAKE_LBCS: "1024m"
  VCOORD_FILE: "{{ workflow.FIXam }}/global_hyblev.l65.txt"

#----------------------------
# IO_LAYOUT_Y FORECAST config parameters
#-----------------------------
task_run_fcst:
  #------------------------------------------------------------------------
  #
  # NNODES_RUN_FCST: 
  # The number of nodes to request from the job scheduler 
  # for the forecast task. 
  # 
  # PPN_RUN_FCST: 
  # Processes per node for the forecast task. 
  #
  # FV3_EXEC_FP: 
  # Full path to the forecast model executable.
  #
  # IO_LAYOUT_Y: 
  # Specifies how many MPI ranks to use in the Y direction for 
  # input/output (I/O). (X direction is assumed to be 1.)
  #
  #------------------------------------------------------------------------
  NNODES_RUN_FCST: '{{ (PE_MEMBER01 + PPN_RUN_FCST - 1) // PPN_RUN_FCST }}'
  PPN_RUN_FCST: '{{ platform.NCORES_PER_NODE // OMP_NUM_THREADS_RUN_FCST }}'
  FV3_EXEC_FP: '{{ [user.EXECdir, workflow.FV3_EXEC_FN]|path_join }}'
  IO_LAYOUT_Y: 1
  #
  #-----------------------------------------------------------------------
  #
  # KMP_AFFINITY_*:
  # From Intel: "The Intel runtime library has the ability to bind OpenMP
  # threads to physical processing units. The interface is controlled using
  # the KMP_AFFINITY environment variable. Depending on the system (machine)
  # topology, application, and operating system, thread affinity can have a
  # dramatic effect on the application speed. 
  #
  # Thread affinity restricts execution of certain threads (virtual execution
  # units) to a subset of the physical processing units in a multiprocessor 
  # computer. Depending upon the topology of the machine, thread affinity can
  # have a dramatic effect on the execution speed of a program."
  #
  # For more information, see the following link:
  # https://software.intel.com/content/www/us/en/develop/documentation/cpp-
  # compiler-developer-guide-and-reference/top/optimization-and-programming-
  # guide/openmp-support/openmp-library-support/thread-affinity-interface-
  # linux-and-windows.html
  # 
  # OMP_NUM_THREADS_RUN_FCST:
  # The number of OpenMP threads to use for parallel regions.
  # 
  # OMP_STACKSIZE_RUN_FCST:
  # Controls the size of the stack for threads created by the OpenMP 
  # implementation.
  #
  #-----------------------------------------------------------------------
  #
  KMP_AFFINITY_RUN_FCST: "scatter"
  OMP_NUM_THREADS_RUN_FCST: 2    # atmos_nthreads in model_configure
  OMP_STACKSIZE_RUN_FCST: "1024m"
  #
  #-----------------------------------------------------------------------
  #
  # Set model_configure parameters.  Definitions:
  #
  # DT_ATMOS:
  # The main forecast model integration time step.  As described in the 
  # forecast model documentation, "It corresponds to the frequency with 
  # which the top level routine in the dynamics is called as well as the 
  # frequency with which the physics is called."
  #
  # FHROT:
  # Forecast hour at restart
  #
  # RESTART_INTERVAL:
  # frequency of the output restart files (unit:hour). 
  # Default=0: restart files are produced at the end of a forecast run
  # For example, i) RESTART_INTERVAL: 1 -1 => restart files are produced 
  # every hour with the prefix "YYYYMMDD.HHmmSS." in the RESTART directory
  # ii) RESTART_INTERVAL: 1 2 5 => restart files are produced only when 
  # fh = 1, 2, and 5.
  #
  # WRITE_DOPOST:
  # Flag that determines whether or not to use the inline post feature
  # [i.e. calling the Unified Post Processor (UPP) from within the
  # weather model].  If this is set to true, the the run_post task will
  # be deactivated.
  #
  # ITASKS:
  # Variable denoting the number of write tasks in the i direction in the
  # current group.  Used for inline post 2D decomposition.  Setting this
  # variable to a value greater than 1 will enable 2D decomposition.
  # Default setting is 1.
  # Note that 2D decomposition does not yet work with GNU compilers, so this value 
  # will be reset to 1 automatically when using GNU compilers (i.e., when COMPILER: gnu).
  #
  #-----------------------------------------------------------------------
  #
  DT_ATMOS: ""
  FHROT: 0
  RESTART_INTERVAL: 0
  WRITE_DOPOST: false
  ITASKS: 1
  #
  #-----------------------------------------------------------------------
  #
  # Set computational parameters for the forecast.  Definitions:
  #
  # LAYOUT_X, LAYOUT_Y:
  # The number of MPI tasks (processes) to use in the two horizontal 
  # directions (x and y) of the regional grid when running the forecast model.
  #
  # BLOCKSIZE:
  # The amount of data that is passed into the cache at a time.
  #
  # Here, we set these parameters to null strings.  This is so that, for 
  # any one of these parameters:
  #
  # 1) If the experiment is using a predefined grid, then if the user 
  #    sets the parameter in the user-specified experiment configuration 
  #    file (EXPT_CONFIG_FN), that value will be used in the forecast(s).
  #    Otherwise, the default value of the parameter for that predefined 
  #    grid will be used.
  #
  # 2) If the experiment is not using a predefined grid (i.e. it is using
  #    a custom grid whose parameters are specified in the experiment 
  #    configuration file), then the user must specify a value for the 
  #    parameter in that configuration file.  Otherwise, the parameter 
  #    will remain set to a null string, and the experiment generation 
  #    will fail because the generation scripts check to ensure that all 
  #    the parameters defined in this section are set to non-empty strings
  #    before creating the experiment directory.
  #
  #-----------------------------------------------------------------------
  #
  LAYOUT_X: '{{ LAYOUT_X }}'
  LAYOUT_Y: '{{ LAYOUT_Y }}'
  BLOCKSIZE: '{{ BLOCKSIZE }}'
  #
  #-----------------------------------------------------------------------
  #
  # Set write-component (quilting) parameters. 
  # 
  # NOTE: The UPP (called by the run_post task) cannot process output on the 
  # native grid types ("GFDLgrid" and "ESGgrid"), so output fields are interpolated 
  # to a write component grid before writing them to an output file. The output files 
  # written by the UFS Weather Model use an Earth System Modeling Framework (ESMF) 
  # component, referred to as the write component. This model component is 
  # configured with settings in the model_configure file, as described in the UFS 
  # Weather Model documentation. 
  #
  # Definitions:
  #
  # QUILTING:
  # Flag that determines whether or not to use the write component for 
  # writing output files to disk. The regional grid requires the use of 
  # the write component, so users should not change the default value. 
  # When set to true, the forecast model will output files named dynf$HHH.nc 
  # and phyf$HHH.nc (where HHH is the 3-digit forecast hour) containing dynamics 
  # and physics fields, respectively, on the write-component grid. 
  # 
  # PRINT_ESMF:
  # Flag that determines whether to output extra (debugging) information from
  # ESMF routines. Must be true or false. Note that the write
  # component uses ESMF library routines to interpolate from the native
  # forecast model grid to the user-specified output grid (which is defined 
  # in the model configuration file "model_configure" in the forecast's  
  # run directory).
  # 
  # WRTCMP_write_groups:
  # The number of write groups (i.e. groups of MPI tasks) to use in the
  # write component.
  #
  # WRTCMP_write_tasks_per_group:
  # The number of MPI tasks to allocate for each write group.
  #
  # WRTCMP_output_grid:
  # Sets the type (coordinate system) of the write component grid. The 
  # default empty string forces the user to set a valid value for 
  # WRTCMP_output_grid in config.yaml if specifying a *custom* grid. When 
  # creating an experiment with a user-defined grid, this parameter must 
  # be specified or the experiment will fail. 
  #
  # WRTCMP_cen_lon:
  # Longitude (in degrees) of the center of the write component grid. Can 
  # usually be set to the corresponding value from the native grid.
  #
  # WRTCMP_cen_lat:
  # Latitude (in degrees) of the center of the write component grid. Can 
  # usually be set to the corresponding value from the native grid.
  #
  # WRTCMP_lon_lwr_left:
  # Longitude (in degrees) of the center of the lower-left (southwest) 
  # cell on the write component grid. If using the "rotated_latlon" 
  # coordinate system, this is expressed in terms of the rotated longitude. 
  # Must be set manually when running an experiment with a user-defined grid.
  #
  # WRTCMP_lat_lwr_left:
  # Latitude (in degrees) of the center of the lower-left (southwest) cell 
  # on the write component grid. If using the "rotated_latlon" coordinate 
  # system, this is expressed in terms of the rotated latitude. Must be set 
  # manually when running an experiment with a user-defined grid.
  # 
  # -----------------------------------------------------------------------
  # Parameters to set when WRTCMP_output_grid is set to "rotated_latlon":
  #
  # WRTCMP_lon_upr_rght:
  # Longitude (in degrees) of the center of the upper-right (northeast) cell 
  # on the write component grid (expressed in terms of the rotated longitude).
  #
  # WRTCMP_lat_upr_rght:
  # Latitude (in degrees) of the center of the upper-right (northeast) cell 
  # on the write component grid (expressed in terms of the rotated latitude).
  #
  # WRTCMP_dlon:
  # Size (in degrees) of a grid cell on the write component grid (expressed 
  # in terms of the rotated longitude).
  #
  # WRTCMP_dlat:
  # Size (in degrees) of a grid cell on the write component grid (expressed 
  # in terms of the rotated latitude).
  #
  # -----------------------------------------------------------------------
  # Parameters to set when WRTCMP_output_grid is set to "lambert_conformal"
  # 
  # WRTCMP_stdlat1:
  # First standard latitude (in degrees) in definition of Lambert conformal 
  # projection.
  #
  # WRTCMP_stdlat2:
  # Second standard latitude (in degrees) in definition of Lambert conformal 
  # projection.
  #
  # WRTCMP_nx:
  # Number of grid points in the x-coordinate of the Lambert conformal 
  # projection.
  #
  # WRTCMP_ny:
  # Number of grid points in the y-coordinate of the Lambert conformal 
  # projection.
  #
  # WRTCMP_dx:
  # Grid cell size (in meters) along the x-axis of the Lambert conformal 
  # projection.
  #
  # WRTCMP_dy:
  # Grid cell size (in meters) along the y-axis of the Lambert conformal 
  # projection. 
  #
  #-----------------------------------------------------------------------
  #
  QUILTING: true
  PRINT_ESMF: false

  PE_MEMBER01: '{{ LAYOUT_Y * LAYOUT_X + WRTCMP_write_groups * WRTCMP_write_tasks_per_group if QUILTING else LAYOUT_Y * LAYOUT_X}}'
  
  WRTCMP_write_groups: ""
  WRTCMP_write_tasks_per_group: ""
  
  WRTCMP_output_grid: "''"
  WRTCMP_cen_lon: ""
  WRTCMP_cen_lat: ""
  WRTCMP_lon_lwr_left: ""
  WRTCMP_lat_lwr_left: ""
  #
  # The following are used only for the case of WRTCMP_output_grid set to
  # "'rotated_latlon'".
  #
  WRTCMP_lon_upr_rght: ""
  WRTCMP_lat_upr_rght: ""
  WRTCMP_dlon: ""
  WRTCMP_dlat: ""
  #
  # The following are used only for the case of WRTCMP_output_grid set to
  # "'lambert_conformal'".
  #
  WRTCMP_stdlat1: ""
  WRTCMP_stdlat2: ""
  WRTCMP_nx: ""
  WRTCMP_ny: ""
  WRTCMP_dx: ""
  WRTCMP_dy: ""
  #
  #-----------------------------------------------------------------------
  #
  # USE_MERRA_CLIMO: Flag that determines whether MERRA2 aerosol climatology 
  # data and lookup tables for optics properties are obtained
  #
  #-----------------------------------------------------------------------
  #
  USE_MERRA_CLIMO: '{{ workflow.CCPP_PHYS_SUITE == "FV3_GFS_v15_thompson_mynn_lam3km" or workflow.CCPP_PHYS_SUITE == "FV3_GFS_v17_p8" }}'
  #
  #-----------------------------------------------------------------------
  #
  # DO_FCST_RESTART:
  # Flag to turn on/off restart capability of forecast task
  #
  #-----------------------------------------------------------------------
  #
  DO_FCST_RESTART: false

#----------------------------
# POST config parameters
#-----------------------------
task_run_post:
  #-----------------------------------------------------------------------
  # KMP_AFFINITY_RUN_POST: 
  # Intel Thread Affinity Interface for the run_post task. 
  #
  # OMP_NUM_THREADS_RUN_POST: 
  # The number of OpenMP threads to use for parallel regions.
  #
  # OMP_STACKSIZE_RUN_POST: 
  # Controls the size of the stack for threads created by the OpenMP implementation.
  #-----------------------------------------------------------------------
  KMP_AFFINITY_RUN_POST: "scatter"
  OMP_NUM_THREADS_RUN_POST: 1
  OMP_STACKSIZE_RUN_POST: "1024m"
  #
  #-----------------------------------------------------------------------
  #
  # Set parameters associated with subhourly forecast model output and 
  # post-processing.
  #
  # SUB_HOURLY_POST:
  # Flag that indicates whether the forecast model will generate output 
  # files on a sub-hourly time interval (e.g., 10 minutes, 15 minutes).
  # This will also cause the post-processor to process these sub-hourly
  # files.  If ths is set to true, then DT_SUBHOURLY_POST_MNTS should be 
  # set to a value between 1 and 59.
  #
  # DT_SUB_HOURLY_POST_MNTS:
  # Time interval in minutes between the forecast model output files 
  # (only used if SUB_HOURLY_POST is set to true). If 
  # SUB_HOURLY_POST is set to true, this needs to be set to a valid 
  # integer between 1 and 59. Note that if SUB_HOURLY_POST is set to true, but
  # DT_SUB_HOURLY_POST_MNTS is set to 0, SUB_HOURLY_POST will be reset
  # to false in the experiment generation scripts (there will be an 
  # informational message in the log file to emphasize this).
  #
  #-----------------------------------------------------------------------
  #
  SUB_HOURLY_POST: false
  DT_SUBHOURLY_POST_MNTS: 0
  #
  #-----------------------------------------------------------------------
  #
  # Set parameters for customizing the post-processor (UPP).  Definitions:
  #
  # USE_CUSTOM_POST_CONFIG_FILE:
  # Flag that determines whether a user-provided custom configuration file
  # should be used for post-processing the model data. If this is set to
  # true, then the workflow will use the custom post-processing (UPP) 
  # configuration file specified in CUSTOM_POST_CONFIG_FP. Otherwise, a 
  # default configuration file provided in the UPP repository will be 
  # used.
  #
  # CUSTOM_POST_CONFIG_FP:
  # The full path to the custom post flat file, including filename, to be 
  # used for post-processing. This is only used if CUSTOM_POST_CONFIG_FILE
  # is set to true.
  #
  # POST_OUTPUT_DOMAIN_NAME:
  # Domain name (in lowercase) used to construct the names of the output files
  # generated by the UPP. If using a predefined grid, this variable defaults to PREDEF_GRID_NAME. 
  # 
  # If using a custom grid, POST_OUTPUT_DOMAIN_NAME must be specified by 
  # the user. Note that this variable is first changed to lowercase
  # before being used to construct the file names.
  # The post output files are named as follows:
  # 
  #   ${NET_default}.tHHz.[var_name].f###.${POST_OUTPUT_DOMAIN_NAME}.grib2
  #
  # TESTBED_FIELDS_FN
  # The file that lists grib2 fields to be extracted for testbed files.
  # An empty string means no need to generate testbed files.
  #
  # NUMX:
  # The number of i regions in a 2D decomposition.  Each i row is 
  # distibuted to numx ranks. Default value of numx is 1.
  # Note that 2D decomposition does not yet work with GNU compilers, so this value 
  # will be reset to 1 automatically when using GNU compilers (i.e., when COMPILER: gnu).
  #
  #-----------------------------------------------------------------------
  #
  USE_CUSTOM_POST_CONFIG_FILE: true
  CUSTOM_POST_CONFIG_FP: "{{ user.SORCdir }}/ufs-weather-model/tests/parm/postxconfig-NT-fv3lam.txt"
  POST_OUTPUT_DOMAIN_NAME: '{{ workflow.PREDEF_GRID_NAME }}'
  TESTBED_FIELDS_FN: ""
  NUMX: 1

#----------------------------
# RUN PRDGEN config parameters
#-----------------------------
task_run_prdgen:
  #-----------------------------------------------------------------------
  # KMP_AFFINITY_RUN_PRDGEN: 
  # Intel Thread Affinity Interface for the run_prdgen task. 
  #
  # OMP_NUM_THREADS_RUN_PRDGEN: 
  # The number of OpenMP threads to use for parallel regions.
  # 
  # OMP_STACKSIZE_RUN_PRDGEN: 
  # Controls the size of the stack for threads created by the OpenMP implementation.
  #-----------------------------------------------------------------------
  KMP_AFFINITY_RUN_PRDGEN: "scatter"
  OMP_NUM_THREADS_RUN_PRDGEN: 1
  OMP_STACKSIZE_RUN_PRDGEN: "1024m"
  #-----------------------------------------------------------------------
  # DO_PARALLEL_PRDGEN:
  # Flag that determines whether to use CFP to run the product generation
  # job in parallel. This should be used with the RRFS_NA_3km grid.
  #
  #-----------------------------------------------------------------------
  DO_PARALLEL_PRDGEN: false
  #
  #
  #-----------------------------------------------------------------------
  #
  # Set additional output grids for wgrib2 remapping, if any.
  # Space-separated list of strings, e.g., ( "130" "242" "clue" )
  # Default is no additional grids
  #
  # Current options as of 23 Apr 2021:
  #  "130"   (CONUS 13.5 km)
  #  "200"   (Puerto Rico 16 km)
  #  "221"   (North America 32 km)
  #  "242"   (Alaska 11.25 km)
  #  "243"   (Pacific 0.4-deg)
  #  "clue"  (NSSL/SPC 3-km CLUE grid for 2020/2021)
  #  "hrrr"  (HRRR 3-km CONUS grid)
  #  "hrrre" (HRRRE 3-km CONUS grid)
  #  "rrfsak" (RRFS 3-km Alaska grid)
  #  "hrrrak" (HRRR 3-km Alaska grid)
  #
  #-----------------------------------------------------------------------
  #
  ADDNL_OUTPUT_GRIDS: []

#----------------------------
# PLOT_ALLVARS config parameters
#-----------------------------
task_plot_allvars:
  #-------------------------------------------------------------------------
  # Path to the reference experiment's COMOUT directory. This is where the GRIB2 files 
  # from postprocessing are located. Make this a template to compare
  # multiple cycle and dates. COMOUT_REF should end with:
  #    nco mode: $PDY/$cyc
  #    community mode: $PDY$cyc/postprd
  # We don't do this inside the code, so that we can compare nco vs com runs.
  #-------------------------------------------------------------------------
  COMOUT_REF: ""
  #------------------------------
  # Plot fcts start and increment
  #------------------------------
  PLOT_FCST_START: 0
  PLOT_FCST_INC: 3
  #-----------------------------------
  # By default the end is FCST_LEN_HRS
  #-----------------------------------
  PLOT_FCST_END: ""
  #------------------------------------------------------------------------------
  # Domains to plot. Currently supported are either "conus" or "regional" or both
  #-------------------------------------------------------------------------------
  PLOT_DOMAINS: ["conus"]

#-----------------------------
# NEXUS_EMISSION config parameters
#-----------------------------
task_nexus_emission:
  #-------------------------------------------------------------------------------
  # PPN_NEXUS_EMISSION: 
  # Processes per node for the nexus_emission_* tasks. 
  # 
  # NNODES_NEXUS_EMISSION:
  # The number of nodes to request from the job scheduler
  # for the nexus emission task.
  #
  # KMP_AFFINITY_NEXUS_EMISSION: 
  # Intel Thread Affinity Interface for the nexus_emission_* tasks. 
  # 
  # OMP_NUM_THREADS_NEXUS_EMISSION: 
  # The number of OpenMP threads to use for parallel regions.
  # 
  # OMP_STACKSIZE_NEXUS_EMISSION: 
  # Controls the size of the stack for threads created by the OpenMP implementation.
  #-------------------------------------------------------------------------------
  PPN_NEXUS_EMISSION: '{{ platform.NCORES_PER_NODE // OMP_NUM_THREADS_NEXUS_EMISSION }}'
  NNODES_NEXUS_EMISSION: 4
  KMP_AFFINITY_NEXUS_EMISSION: "scatter"
  OMP_NUM_THREADS_NEXUS_EMISSION: 2
  OMP_STACKSIZE_NEXUS_EMISSION: "1024m"

#-----------------------------
# POINT_SOURCE config parameters
#-----------------------------
task_point_source:
  #-------------------------------------------------------------------------------
  # PT_SRC_SUBDIR:
  # Sub-directory structure of point source data under FIXemis.
  # Full path: FIXemis/PT_SRC_SUBDIR
  #-------------------------------------------------------------------------------
  PT_SRC_SUBDIR: "NEI2016v1/v2023-01-PT"  

#----------------------------
# BIAS_CORRECTION_O3 config parameters
#-----------------------------
task_bias_correction_o3:
  #-------------------------------------------------------------------------------
  # KMP_AFFINITY_BIAS_CORRECTION_O3: 
  # Intel Thread Affinity Interface for the bias_correction_o3 task. 
  # 
  # OMP_NUM_THREADS_BIAS_CORRECTION_O3: 
  # The number of OpenMP threads to use for parallel regions.
  # 
  # OMP_STACKSIZE_BIAS_CORRECTION_O3: 
  # Controls the size of the stack for threads created by the OpenMP implementation.
  #-------------------------------------------------------------------------------
  KMP_AFFINITY_BIAS_CORRECTION_O3: "scatter"
  OMP_NUM_THREADS_BIAS_CORRECTION_O3: 32
  OMP_STACKSIZE_BIAS_CORRECTION_O3: "2056M"

#----------------------------
# BIAS_CORRECTION_PM25 config parameters
#-----------------------------
task_bias_correction_pm25:
  #-------------------------------------------------------------------------------
  # KMP_AFFINITY_BIAS_CORRECTION_PM25: 
  # Intel Thread Affinity Interface for the ``bias_correction_pm25`` task. 
  # 
  # OMP_NUM_THREADS_BIAS_CORRECTION_PM25: 
  # The number of OpenMP threads to use for parallel regions.
  # 
  # OMP_STACKSIZE_BIAS_CORRECTION_PM25: 
  # Controls the size of the stack for threads created by the OpenMP implementation.
  #-------------------------------------------------------------------------------
  KMP_AFFINITY_BIAS_CORRECTION_PM25: "scatter"
  OMP_NUM_THREADS_BIAS_CORRECTION_PM25: 32
  OMP_STACKSIZE_BIAS_CORRECTION_PM25: "2056M"

#----------------------------
# global config parameters
#-----------------------------
global:
  #
  #-----------------------------------------------------------------------
  #
  # Set parameters associated with outputting satellite fields in the UPP
  # grib2 files using the Community Radiative Transfer Model (CRTM).
  #
  # USE_CRTM:
  # Flag that defines whether external CRTM coefficient files have been
  # staged by the user in order to output synthetic satellite products
  # available within the UPP. If this is set to true, then the workflow
  # will check for these files in the directory CRTM_DIR. Otherwise, it is
  # assumed that no satellite fields are being requested in the UPP
  # configuration.
  #
  # CRTM_DIR:
  # This is the path to the top CRTM fix file directory. This is only used
  # if USE_CRTM is set to true.
  #
  #-----------------------------------------------------------------------
  #
  USE_CRTM: false
  CRTM_DIR: ""
  #
  #-----------------------------------------------------------------------
  #
  # Set parameters associated with running ensembles.  Definitions:
  #
  # DO_ENSEMBLE:
  # Flag that determines whether to run a set of ensemble forecasts (for
  # each set of specified cycles).  If this is set to true, NUM_ENS_MEMBERS
  # forecasts are run for each cycle, each with a different set of stochastic
  # seed values.  When false, a single forecast is run for each cycle.
  #
  # NUM_ENS_MEMBERS:
  # The number of ensemble members to run if DO_ENSEMBLE is set to true.
  # This variable also controls the naming of the ensemble member directories.
  # For example, if this is set to 8, the member directories will be named 
  # mem1, mem2, ..., mem8. Not used if DO_ENSEMBLE is set to false.
  #
  # ENSMEM_NAMES:
  # A list of names for the ensemble member names following the format
  # mem001, mem002, etc.
  #
  # FV3_NML_ENSMEM_FPS:
  # Paths to the ensemble member corresponding namelists in the
  # experiment directory
  #
  # ENS_TIME_LAG_HRS:
  # Time lag (in hours) to use for each ensemble member. For a deterministic
  # forecast, this is a one-element array. Default values of array elements
  # are zero.
  #
  #-----------------------------------------------------------------------
  #
  DO_ENSEMBLE: false
  NUM_ENS_MEMBERS: 0
  ENSMEM_NAMES: '{% for m in range(NUM_ENS_MEMBERS) %}{{ "mem%03d, " % m }}{% endfor %}'
  FV3_NML_ENSMEM_FPS: '{% for mem in ENSMEM_NAMES %}{{ [EXPTDIR, "%s_%s" % FV3_NML_FN, mem]|path_join }}{% endfor %}'
  ENS_TIME_LAG_HRS: '[ {% for m in range([1,NUM_ENS_MEMBERS]|max) %} 0, {% endfor %} ]'
  #
  #-----------------------------------------------------------------------
  #
  # Set default ad-hoc stochastic physics options.
  # For detailed documentation of these parameters, see:
  # https://stochastic-physics.readthedocs.io/en/ufs_public_release/namelist_options.html
  #
  #-----------------------------------------------------------------------
  #
  DO_SHUM: false
  DO_SPPT: false
  DO_SKEB: false
  ISEED_SPPT: 1
  ISEED_SHUM: 2
  ISEED_SKEB: 3
  NEW_LSCALE: true
  SHUM_MAG: 0.006 #Variable "shum" in input.nml
  SHUM_LSCALE: 150000
  SHUM_TSCALE: 21600 #Variable "shum_tau" in input.nml
  SHUM_INT: 3600 #Variable "shumint" in input.nml
  SPPT_MAG: 0.7 #Variable "sppt" in input.nml
  SPPT_LOGIT: true
  SPPT_LSCALE: 150000
  SPPT_TSCALE: 21600 #Variable "sppt_tau" in input.nml
  SPPT_INT: 3600 #Variable "spptint" in input.nml
  SPPT_SFCLIMIT: true
  SKEB_MAG: 0.5 #Variable "skeb" in input.nml
  SKEB_LSCALE: 150000
  SKEB_TSCALE: 21600 #Variable "skeb_tau" in input.nml
  SKEB_INT: 3600 #Variable "skebint" in input.nml
  SKEBNORM: 1
  SKEB_VDOF: 10
  USE_ZMTNBLCK: false
  #
  #-----------------------------------------------------------------------
  #
  # Set default SPP stochastic physics options. 
  # SPP perturbs specific tuning parameters within a physics parameterization 
  # (unlike SPPT, which multiplies overall physics tendencies by a random  
  # perturbation field *after* the call to the physics suite).Patterns evolve 
  # and are applied at each time step. Each SPP option is an array, 
  # applicable (in order) to the HRRR-based parameterization listed in SPP_VAR_LIST. 
  # Enter each value of the array in config.yaml as shown below without commas
  # or single quotes (e.g., SPP_VAR_LIST: [ "pbl" "sfc" "mp" "rad" "gwd" ] ). 
  # Both commas and single quotes will be added by Jinja when creating the
  # namelist.
  #
  # Note that SPP is currently only available for specific physics schemes 
  # used in the RAP/HRRR physics suite. Users need to be aware of which SDF
  # is chosen when turning this option on. 
  #
  #-----------------------------------------------------------------------
  #
  DO_SPP: false
  SPP_VAR_LIST: [ "pbl", "sfc", "mp", "rad", "gwd" ]
  SPP_MAG_LIST: [ 0.2, 0.2, 0.75, 0.2, 0.2 ] #Variable "spp_prt_list" in input.nml
  SPP_LSCALE: [ 150000.0, 150000.0, 150000.0, 150000.0, 150000.0 ]
  SPP_TSCALE: [ 21600.0, 21600.0, 21600.0, 21600.0, 21600.0 ] #Variable "spp_tau" in input.nml
  SPP_SIGTOP1: [ 0.1, 0.1, 0.1, 0.1, 0.1 ]
  SPP_SIGTOP2: [ 0.025, 0.025, 0.025, 0.025, 0.025 ]
  SPP_STDDEV_CUTOFF: [ 1.5, 1.5, 2.5, 1.5, 1.5 ]
  ISEED_SPP: [ 4, 5, 6, 7, 8 ]
  #
  #-----------------------------------------------------------------------
  #
  # Turn on SPP in Noah or RUC LSM (support for Noah MP is in progress).
  # Please be aware of the SDF that you choose if you wish to turn on LSM
  # SPP.
  #
  # SPP in LSM schemes is handled in the &nam_sfcperts namelist block 
  # instead of in &nam_sppperts, where all other SPP is implemented.
  #
  # Perturbations to soil moisture content (SMC) are only applied at the 
  # first time step.
  #
  # LSM perturbations include SMC - soil moisture content (volume fraction),
  # VGF - vegetation fraction, ALB - albedo, SAL - salinity, 
  # EMI - emissivity, ZOL - surface roughness (cm), and STC - soil temperature.
  #
  # Only five perturbations at a time can be applied currently, but all seven
  # are shown below.  In addition, only one unique iseed value is allowed 
  # at the moment, and is used for each pattern.
  #
  DO_LSM_SPP: false #If true, sets lndp_type=2
  LSM_SPP_TSCALE: [ 21600, 21600, 21600, 21600, 21600, 21600, 21600 ]
  LSM_SPP_LSCALE: [ 150000, 150000, 150000, 150000, 150000, 150000, 150000 ]
  ISEED_LSM_SPP: [ 9 ]
  LSM_SPP_VAR_LIST: [ "smc", "vgf", "alb", "sal", "emi", "zol", "stc" ]
  LSM_SPP_MAG_LIST: [ 0.017, 0.001, 0.001, 0.001, 0.001, 0.001, 0.2 ]
  #
  #-----------------------------------------------------------------------
  # 
  # HALO_BLEND:
  # The number of cells to use for "blending" the external solution (obtained from 
  # the LBCs) with the internal solution from the FV3LAM dycore.
  # Specifically, it refers to the number of rows into the computational domain 
  # that should be blended with the LBCs. To shut halo blending off, this can be set to zero.
  #
  #-----------------------------------------------------------------------
  #
  HALO_BLEND: 10
  #
  #-----------------------------------------------------------------------
  #
  # PRINT_DIFF_PGR:
  # Option to turn on/off the pressure tendency diagnostic.
  #
  #-----------------------------------------------------------------------
  #
  PRINT_DIFF_PGR: false

#----------------------------
# verification (vx) parameters
#-----------------------------
verification:
  #
  # METPLUS_VERBOSITY_LEVEL: 
  # Logging verbosity level used by METplus verification tools.  0 to 5,
  # with 0 quiet and 5 loud.  
  # 
  METPLUS_VERBOSITY_LEVEL: 2
  #
  # [CCPA|NOHRSC|MRMS|NDAS]_OBS_DIR:
  # Base directory in which CCPA, NOHRSC, MRMS, or NDAS obs files needed by
  # the verification tasks are located.  If the files do not exist, they
  # will be retrieved and placed under this directory.
  #
  # Notes:
  #
  # * If the obs files need to be retrieved (e.g. from NOAA's HPSS), then
  #   the user must have write permission to this directory.  Otherwise,
  #   the get_obs tasks that attempt to create these files will fail.
  #
  # * Do not set two or more of these directories to the same location.
  #   Otherwise, unexpected results and data loss may occur.
  #
  # * The script ush/get_obs.py contains further details on the files and
  #   directory structure of each obs type.
  #
  # * CCPA obs contain errors in the metadata for a certain range of dates
  #   that need to be corrected during obs retrieval.  This is described
  #   in more detail in ush/get_obs.py.
  #
  CCPA_OBS_DIR: "{{ workflow.EXPTDIR }}/obs_data/ccpa"
  NOHRSC_OBS_DIR: "{{ workflow.EXPTDIR }}/obs_data/nohrsc"
  MRMS_OBS_DIR: "{{ workflow.EXPTDIR }}/obs_data/mrms"
  NDAS_OBS_DIR: "{{ workflow.EXPTDIR }}/obs_data/ndas"
  #
  # OBS_[CCPA_APCP|NOHRSC_ASNOW|MRMS_[REFC|RETOP]|NDAS_ADPSFCandADPUPA]_FN_TEMPLATE:
  # File name templates for various obs type and vx field group combinations.
  #
  # Notes:
  #
  # * These are relative to the obs base directories
  #       [CCPA|NOHRSC|MRMS|NDAS]_OBS_DIR
  #   defined above.  Thus, the full template to the obs files is given, e.g.
  #   for CCPA obs, by {CCPA_OBS_DIR}/{OBS_CCPA_APCP_FN_TEMPLATE}.
  #
  # * These may represent file names only, or they may include relative paths
  #   before the file names.
  #
  # * These templates must contain full information about the year, month,
  #   day, and hour by including METplus time strings that serve as templates
  #   for this information.  Some of this information may be in the relative
  #   directory portion and the rest in the file name, or there may be no
  #   relative directory portion and all of it may be in the file name, but
  #   all four pieces of timing information must be present somewhere in
  #   this template as METplus time strings.  Otherwise, obs files created 
  #   by the get_obs tasks for different days might overwrite each other.
  #
  # * If one or more of the obs files specified by this full path do not
  #   exist on disk, all the files will be created by first retrieving "raw"
  #   versions of them from a data store (e.g. NOAA's HPSS) and then placing
  #   these raw files in the locations specified by this full path template.
  #
  # * The raw obs files, i.e. the obs files as they are named and arranged
  #   in the data stores, may be different than the file path/name specified
  #   in these variables.  The list of templates for raw files to search
  #   for in the data stores is given in the data retrieval configuration
  #   file at parm/data_locations.yml.  Once retrieved, these raw files are
  #   renamed and relocated on disk to the locations specified by
  #   {..._OBS_DIR}/{..._FN_TEMPLATE}.
  #
  OBS_CCPA_APCP_FN_TEMPLATE: '{%- set data_intvl_hrs = "%02d" % CCPA_OBS_AVAIL_INTVL_HRS %}
                              {{- "{valid?fmt=%Y%m%d}/ccpa.t{valid?fmt=%H}z." ~ data_intvl_hrs ~ "h.hrap.conus.gb2" }}'
  OBS_NOHRSC_ASNOW_FN_TEMPLATE: '{%- set data_intvl_hrs = "%d" % NOHRSC_OBS_AVAIL_INTVL_HRS %}
                                 {{- "sfav2_CONUS_" ~ data_intvl_hrs ~ "h_{valid?fmt=%Y%m%d%H}_grid184.grb2" }}'
  OBS_MRMS_REFC_FN_TEMPLATE: '{valid?fmt=%Y%m%d}/MergedReflectivityQCComposite_00.50_{valid?fmt=%Y%m%d}-{valid?fmt=%H%M%S}.grib2'
  OBS_MRMS_RETOP_FN_TEMPLATE: '{valid?fmt=%Y%m%d}/EchoTop_18_00.50_{valid?fmt=%Y%m%d}-{valid?fmt=%H%M%S}.grib2'
  OBS_NDAS_ADPSFCandADPUPA_FN_TEMPLATE: 'prepbufr.ndas.{valid?fmt=%Y%m%d%H}'
  #
  # Time interval (in hours) at which various types of obs are available on
  # NOAA's HPSS.
  #
  # Note that MRMS files are in fact available every few minutes, but here
  # we set the obs availability interval to 1 hour because currently that
  # is the shortest output interval for the forecast, i.e. the forecast
  # cannot (yet) support sub-hourly output.
  #
  CCPA_OBS_AVAIL_INTVL_HRS: 1
  NOHRSC_OBS_AVAIL_INTVL_HRS: 6
  MRMS_OBS_AVAIL_INTVL_HRS: 1
  NDAS_OBS_AVAIL_INTVL_HRS: 1
  #
  # REMOVE_RAW_OBS_DIRS_[CCPA|NOHRSC|MRMS|NDAS]:
  # Boolean flag specifying whether to remove the "raw" observation
  # directories after pulling the specified type of obs (CCPA, NOHRSC,
  # MRMS, or NOHRSC).  The raw directories are the ones in which the
  # observation files are placed immediately after pulling them from
  # a data store (e.g. NOAA's HPSS) but before performing any processing
  # on them (e.g. renaming the files or reorganizing their directory
  # structure).
  #
  REMOVE_RAW_OBS_CCPA: true
  REMOVE_RAW_OBS_NOHRSC: true
  REMOVE_RAW_OBS_MRMS: true
  REMOVE_RAW_OBS_NDAS: true
  # 
  # OBS_CCPA_APCP_FN_TEMPLATE_PCPCOMBINE_OUTPUT: 
  # Template used to specify the names of the output NetCDF observation
  # files generated by the worfklow verification tasks that call the METplus
  # PcpCombine tool on CCPA observations.  (These files will contain obs
  # APCP, both for 1 hour and for > 1 hour accumulation periods, in NetCDF
  # format.)
  #
  # OBS_NOHRSC_ASNOW_FN_TEMPLATE_PCPCOMBINE_OUTPUT: 
  # Template used to specify the names of the output NetCDF observation
  # files generated by the worfklow verification tasks that call the METplus
  # PcpCombine tool on NOHRSC observations.  (These files will contain obs
  # APCP, both for 1 hour and for > 1 hour accumulation periods, in NetCDF
  # format.)
  #
  # OBS_NDAS_ADPSFCandADPUPA_FN_TEMPLATE_PB2NC_OUTPUT: 
  # Template used to specify the names of the output NetCDF observation
  # files generated by the worfklow verification tasks that call the
  # METplus Pb2nc tool on NDAS observations.  (These files will contain
  # obs ADPSFC or ADPUPA fields in NetCDF format.)
  #
  OBS_CCPA_APCP_FN_TEMPLATE_PCPCOMBINE_OUTPUT: '{%- set data_intvl_hrs = "%02d" % CCPA_OBS_AVAIL_INTVL_HRS %}
                                                {{- "ccpa.t{valid?fmt=%H}z." ~ data_intvl_hrs ~ "h.hrap.conus.gb2_a${ACCUM_HH}h.nc" }}'
  OBS_NOHRSC_ASNOW_FN_TEMPLATE_PCPCOMBINE_OUTPUT: '{%- set data_intvl_hrs = "%d" % NOHRSC_OBS_AVAIL_INTVL_HRS %}
                                                   {{- "sfav2_CONUS_" ~ data_intvl_hrs ~ "h_{valid?fmt=%Y%m%d%H}_grid184.grb2_a${ACCUM_HH}h.nc" }}'
  OBS_NDAS_ADPSFCandADPUPA_FN_TEMPLATE_PB2NC_OUTPUT: '${OBS_NDAS_ADPSFCandADPUPA_FN_TEMPLATE}.nc'
  #
  # VX_FCST_MODEL_NAME:
  # String that specifies a descriptive name for the model being verified.
  # This is used in forming the names of the verification output files as
  # well as in the contents of those files.
  #
  # VX_FIELDS:
  # The fields or groups of fields on which to run verification. Because
  # accumulated snow (ASNOW) is often not of interest in non-winter cases
  # and because observation files for ASNOW are not available on NOAA
  # HPSS for retrospective cases before March 2020, by default ASNOW is
  # not included VX_FIELDS, but it may be added to this list in order to
  # include the verification tasks for ASNOW in the workflow. 
  #
  # VX_APCP_ACCUMS_HRS:
  # The 2-digit accumulation periods (in units of hours) to consider for
  # APCP (accumulated precipitation).  If VX_FIELDS contains "APCP", then
  # VX_APCP_ACCUMS_HRS must contain at least one element.  If not,
  # VX_APCP_ACCUMS_HRS will be ignored.
  #
  # VX_ASNOW_ACCUMS_HRS:
  # The 2-digit accumulation periods (in units of hours) to consider for
  # ASNOW (accumulated snowfall).  If VX_FIELDS contains "ASNOW", then
  # VX_ASNOW_ACCUMS_HRS must contain at least one element.  If not,
  # VX_ASNOW_ACCUMS_HRS will be ignored.
  #
  VX_FCST_MODEL_NAME: '{{ nco.NET_default }}.{{ task_run_post.POST_OUTPUT_DOMAIN_NAME }}'
  VX_FIELDS: [ "APCP", "REFC", "RETOP", "ADPSFC", "ADPUPA" ]
  VX_APCP_ACCUMS_HRS: [ 1, 3, 6, 24 ]
  VX_ASNOW_ACCUMS_HRS: [ 6, 24 ]
  #
  # Set the forecast output interval to use for verification purposes.
  # If the forecasts to be verified are being run in the SRW (i.e. they
  # are not staged from another forecast model), then this should be set
  # set to the SRW's forecast output interval, but such a variable is
  # currently not available in this configuration file.  Instead, for
  # now we set it to a default value of 1 hour.
  #
  VX_FCST_OUTPUT_INTVL_HRS: 1
  #
  # VX_FCST_INPUT_BASEDIR:
  # Template for top-level directory containing forecast (but not obs)
  # files that will be used as input into METplus for verification.
  #
  # VX_OUTPUT_BASEDIR:
  # Template for top-level directory in which METplus will place its
  # output.
  #
  VX_FCST_INPUT_BASEDIR: '{% if user.RUN_ENVIR == "nco" %}$COMOUT/../..{% else %}{{ workflow.EXPTDIR }}{% endif %}'
  VX_OUTPUT_BASEDIR: '{% if user.RUN_ENVIR == "nco" %}$COMOUT/metout{% else %}{{ workflow.EXPTDIR }}{% endif %}'
  #
  # Number of digits in the ensemble member names.  This is a configurable
  # variable to allow users to change its value (e.g. to go from "mem004"
  # to "mem04") when using staged forecast files that do not use the same
  # number of digits as the SRW App.
  #
  VX_NDIGITS_ENSMEM_NAMES: 3
  #
  # File name and path templates used in the verification tasks.
  #
  # FCST_SUBDIR_TEMPLATE:
  # Template for the subdirectory containing forecast files that are
  # inputs to the verification tasks.
  # 
  # FCST_FN_TEMPLATE:
  # Template for the names of the forecast files that are inputs to the
  # verification tasks.
  # 
  # FCST_FN_TEMPLATE_PCPCOMBINE_OUTPUT:
  # Template used to specify the names of the output NetCDF forecast files
  # generated by the worfklow verification tasks that call the METplus
  # PcpCombine tool on forecasts.  (These files will contain forecast APCP,
  # both for 1 hour and for > 1 hour accumulation periods, in NetCDF
  # format.)
  #
  FCST_SUBDIR_TEMPLATE: '{%- if user.RUN_ENVIR == "nco" %}
                           {{- "${NET_default}.{init?fmt=%Y%m%d?shift=-${time_lag}}/{init?fmt=%H?shift=-${time_lag}}" }}
                         {%- else %}
                           {{- "{init?fmt=%Y%m%d%H?shift=-${time_lag}}" }}
                           {%- if global.DO_ENSEMBLE %}
                             {{- "/${ensmem_name}" }}
                           {%- endif %}
                           {{- "/postprd" }}
                         {%- endif %}'
  FCST_FN_TEMPLATE: '{{- "${NET_default}.t{init?fmt=%H?shift=-${time_lag}}z" }}
                     {%- if user.RUN_ENVIR == "nco" and global.DO_ENSEMBLE %}
                       {{- ".${ensmem_name}" }}
                     {%- endif %}
                     {{- ".prslev.f{lead?fmt=%HHH?shift=${time_lag}}.${POST_OUTPUT_DOMAIN_NAME}.grib2" }}'
  FCST_FN_TEMPLATE_PCPCOMBINE_OUTPUT: '{{- "${NET_default}.t{init?fmt=%H}z" }}
                                       {%- if user.RUN_ENVIR == "nco" and global.DO_ENSEMBLE %}
                                         {{- ".${ensmem_name}" }}
                                       {%- endif %}
                                       {{- ".prslev.f{lead?fmt=%HHH}.${POST_OUTPUT_DOMAIN_NAME}_${VAR}_a${ACCUM_HH}h.nc" }}'
  #
  # For verification tasks that need observational data, this specifies
  # the maximum number of observation files that may be missing.  If more
  # than this number are missing, the verification task will error out.
  #
  # Note that this is a crude way of checking that there are enough obs to
  # conduct verification since this number should probably depend on the
  # field being verified, the time interval between observations, the
  # length of the forecast, etc.  An alternative may be to specify the
  # maximum allowed fraction of obs files that can be missing (i.e. the
  # number missing divided by the number that are expected to exist).
  #
  NUM_MISSING_OBS_FILES_MAX: 2
  #
  # For verification tasks that need forecast data, this specifies the
  # maximum number of post-processed forecast files that may be missing. 
  # If more than this number are missing, the verification task will not
  # be run.
  #
  NUM_MISSING_FCST_FILES_MAX: 0
  #
  # Names of configuration files for deterministic and ensemble vx that
  # specify the field groups, field names, levels, and (if applicable)
  # thresholds for which to run verification.
  #
  VX_CONFIG_DET_FN: 'vx_config_det.yaml'
  VX_CONFIG_ENS_FN: 'vx_config_ens.yaml'

#----------------------------
# CPL_AQM config parameters
#-----------------------------
cpl_aqm_parm:
  #
  #-----------------------------------------------------------------------
  #
  # CPL_AQM:
  # Coupling flag for air quality modeling
  #
  # DO_AQM_DUST:
  # Flag turning on/off AQM dust option in AQM_RC
  #
  # DO_AQM_CANOPY
  # Flag turning on/off AQM canopy option in AQM_RC
  # 
  # DO_AQM_PRODUCT
  # Flag turning on/off AQM output products in AQM_RC
  # 
  # DO_AQM_CHEM_LBCS:
  # Add chemical LBCs to chemical LBCs
  # 
  # DO_AQM_GEFS_LBCS:
  # Add GEFS aerosol LBCs to chemical LBCs
  #
  # DO_AQM_SAVE_AIRNOW_HIST:
  # Save bias-correction airnow training data
  #
  # DO_AQM_SAVE_FIRE:
  # Archive fire emission file to HPSS
  # 
  # COMINairnow_default:
  # Path to the directory containing AIRNOW observation data
  #
  # COMINfire_default:
  # Path to the directory containing AQM fire files
  # 
  # COMINgefs_default:
  # Path to the directory containing GEFS aerosol LBC files
  # 
  # AQM_BIO_FILE:
  # File name of AQM BIO file
  #
  # AQM_DUST_FILE_PREFIX:
  # Frefix of AQM dust file
  #
  # AQM_DUST_FILE_SUFFIX:
  # Suffix and extension of AQM dust file
  #
  # AQM_CANOPY_FILE_PREFIX:
  # File name of AQM canopy file
  #
  # AQM_CANOPY_FILE_SUFFIX:
  # Suffix and extension of AQM CANOPY file
  # 
  # AQM_FIRE_FILE_PREFIX:
  # Prefix of AQM FIRE file
  # 
  # AQM_FIRE_FILE_SUFFIX:
  # Suffix and extension of AQM FIRE file
  #
  # AQM_FIRE_FILE_OFFSET_HRS: 
  # Time offset when retrieving fire emission data files. 
  # 
  # AQM_RC_FIRE_FREQUENCY:
  # Fire frequency in aqm.rc
  #
  # AQM_RC_PRODUCT_FN:
  # File name of AQM output products
  #
  # AQM_RC_PRODUCT_FREQUENCY:
  # Frequency of AQM output products
  #
  # AQM_LBCS_FILES:
  # File name of chemical LBCs
  #
  # AQM_GEFS_FILE_PREFIX:
  # Prefix of AQM GEFS file ("geaer" or "gfs")
  #
  # AQM_GEFS_FILE_CYC:
  # Cycle of the GEFS aerosol LBC files only if it is fixed
  # 
  # NEXUS_GRID_FN:
  # File name of the input grid_spec file of nexus
  #
  # NUM_SPLIT_NEXUS:
  # Number of split nexus emission tasks
  #
  # NEXUS_GFS_SFC_OFFSET_HRS: 0
  # Time offset when retrieving gfs surface data files
  # 
  # NEXUS_GFS_SFC_DIR:
  # Path to directory containing GFS surface data files
  # This is set to COMINgfs when DO_REAL_TIME=TRUE. 
  #
  # NEXUS_GFS_SFC_ARCHV_DIR: 
  # Path to archive directory for gfs surface files on HPSS
  #
  #-----------------------------------------------------------------------
  #
  CPL_AQM: false

  DO_AQM_DUST: true
  DO_AQM_CANOPY: false
  DO_AQM_PRODUCT: true
  DO_AQM_CHEM_LBCS: true
  DO_AQM_GEFS_LBCS: false
  DO_AQM_SAVE_AIRNOW_HIST: false
  DO_AQM_SAVE_FIRE: false

  COMINairnow_default: "/path/to/airnow/obaservation/data"
  COMINfire_default: ""
  COMINgefs_default: ""

  AQM_BIO_FILE: "BEIS_SARC401.ncf"

  AQM_DUST_FILE_PREFIX: "FENGSHA_p8_10km_inputs"
  AQM_DUST_FILE_SUFFIX: ".nc"

  AQM_CANOPY_FILE_PREFIX: "gfs.t12z.geo"
  AQM_CANOPY_FILE_SUFFIX: ".canopy_regrid.nc"

  AQM_FIRE_FILE_PREFIX: "GBBEPx_C401GRID.emissions_v003"
  AQM_FIRE_FILE_SUFFIX: ".nc"
  AQM_FIRE_FILE_OFFSET_HRS: 0

  AQM_RC_FIRE_FREQUENCY: "static"
  AQM_RC_PRODUCT_FN: "aqm.prod.nc"
  AQM_RC_PRODUCT_FREQUENCY: "hourly"

  AQM_LBCS_FILES: "gfs_bndy_chen_<MM>.tile7.000.nc"

  AQM_GEFS_FILE_PREFIX: "geaer"
  AQM_GEFS_FILE_CYC: ""

  NEXUS_GRID_FN: "grid_spec_GSD_HRRR_25km.nc"
  NUM_SPLIT_NEXUS: 3
  NEXUS_GFS_SFC_OFFSET_HRS: 0
  NEXUS_GFS_SFC_DIR: ""
  NEXUS_GFS_SFC_ARCHV_DIR: "/NCEPPROD/hpssprod/runhistory"

rocoto:
  attrs: ""
  cycledefs: ""
  entities: ""
  log: ""
  tasks:
    taskgroups: ""
